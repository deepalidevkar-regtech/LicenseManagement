package licensePerformer;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.Document;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriver.Window;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import LicenseCompanyadmin.MethodPOM;
import cfo.CFOcountPOM;
import licenseManagement.licmgmtPOM;
import licenseReviewer.LiReviewerPOM;
import litigationPerformer.performerPOM;
import login.webpage;
import performer.OverduePOM;
import reviewer.ReviewerPOM;

public class LiPeMethodsPOM  extends webpage{
	private static List<WebElement> elementsList = null;
	
	public static FileInputStream fis = null;	//File input stream variable
	public static XSSFWorkbook workbook = null;	//Excel sheet workbook variable
	public static XSSFSheet sheet = null;		//Sheet variable
	public static XSSFSheet sheet1 = null;		//Sheet variable
	
	public static void ActiveLicense( ExtentTest test, String type) throws InterruptedException, IOException
	{	
		WebDriverWait wait = new WebDriverWait( getDriver(), 20);
			
			wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickActive()));
			String Active=MethodPOM.clickActive().getText();
			
		     int Activelicense = Integer.parseInt(Active);	//Reading Active count.

		      MethodPOM.clickActive().click();					//Clicking on 'Active' image
		      Thread.sleep(4000);
		        JavascriptExecutor js1=(JavascriptExecutor)getDriver() ;
				js1.executeScript("window.scroll(0,500)");
				Thread.sleep(4000);
			  	String item1 = MethodPOM.clickReadExpired().getText();	//Reading total items String value
				  if(!item1.equalsIgnoreCase("No items to display"))
				  {
				MethodPOM.clickReadActive().click();					//Clicking on total items count
				Thread.sleep(500);
				String item = MethodPOM.clickReadActive().getText();	//Reading total items String value
				String[] bits = item.split(" ");								//Splitting the String
				String LicenseActiveCount = bits[bits.length - 2];		//Getting the second last word (total number of users)
				
				//int total = Integer.parseInt(MethodPOM.clickReadActive.getText());
				int total = Integer.parseInt(LicenseActiveCount);
				if(Activelicense == total)
		{
			//test.log(LogStatus.PASS, "Dashboard 'Expired' count matches to the total records displayed in grid.");
			test.log(LogStatus.PASS, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
		}
		else
		{
			//test.log(LogStatus.FAIL, "Dashboard 'Expired' count doesn't matches to the total records displayed in grid.");
			test.log(LogStatus.FAIL, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
		}
		Thread.sleep(5000);	
		MethodPOM.ClickActiveOverview().click();
		test.log(LogStatus.PASS, " License Overview Details Successfully.");
		Thread.sleep(5000);
		MethodPOM.ClickCloseOverview().click();			
		Thread.sleep(7000);
		LiPerformerPOM.editlicenseicon().click();
		Thread.sleep(5000);
		licenseManagement.licmgmtPOM.LicenseTitle().sendKeys(".");	
		Thread.sleep(5000);
		//licenseManagement.licmgmtPOM.LicenseNo().sendKeys("Test");
		//Thread.sleep(5000);
		js1.executeScript("window.scrollBy(0,3000)");
		Thread.sleep(3000);
		//LiPerformerPOM.editnomineebtn.click();
		Thread.sleep(3000);
		 /*licmgmtPOM.ClickNomineedrp.click();
		 Thread.sleep(3000);
		 licmgmtPOM.SelectNominee.click();
		 
		 Thread.sleep(5000);
		// js1.executeScript("window.scroll(0,2000)");
		// Thread.sleep(5000);
		 licmgmtPOM.ClickModificdate.click();
		 Thread.sleep(6000);	
		 js1.executeScript("window.scroll(0,2000)");
		 Thread.sleep(6000);		 
		 licmgmtPOM.ModificatioDate.click();		 
		 Thread.sleep(6000);
		 js1.executeScript("window.scroll(0,2000)");
		 licmgmtPOM.nomineestartdatecal.click();
		 Thread.sleep(3000);
		 licmgmtPOM.selectnominstartdate.click();
		 Thread.sleep(3000);
		 JavascriptExecutor js2=(JavascriptExecutor) driver ;
			js2.executeScript("window.scroll(0,2000)");
		 licmgmtPOM.nomineeEnddatecal.click();
		 Thread.sleep(5000);
		 licmgmtPOM.selectnomineenddate.click();
		 Thread.sleep(5000);*/
		licenseManagement.licmgmtPOM.Nomineesubmit().click();
		 // Switching to Alert    
		 Thread.sleep(500);
        Alert alert =getDriver().switchTo().alert();
       
        // Capturing alert message.   
        String alertMessage= getDriver().switchTo().alert().getText();
       
        Thread.sleep(3000);
      //  test.log(LogStatus.PASS, alertMessage);
       
        // Displaying alert message
       // System.out.println(alertMessage);
        // Accepting alert
        /*Thread.sleep(3000);
        By locator = By.xpath("//*[@class='k-button-group k-dialog-buttongroup k-dialog-button-layout-stretched']");

    	wait.until(ExpectedConditions.presenceOfElementLocated(locator));
    	Thread.sleep(4000);
    	
    	WebElement ViewButton = driver.findElement(locator);	
    	Thread.sleep(3000);
    JavascriptExecutor jse=(JavascriptExecutor)driver;
    jse.executeScript("arguments[0].click();", ViewButton);
    	Thread.sleep(4000);
        
      //  LiPerformerPOM.licenseOK.click();
        
     */
        // Accepting alert
        alert.accept();
        test.log(LogStatus.PASS,"License Details Updated Successfully." );
        
          Thread.sleep(5000);
          
          licmgmtPOM.editlicenseclose().click();
          Thread.sleep(300);
          js1.executeScript("window.scrollBy(0,2000)");				//Scrolling down window by 2000 px.
			
		  Thread.sleep(10000);
			CFOcountPOM.readTotalItems1().click();
			
			String item2 = CFOcountPOM.readTotalItems1().getText();
			//String NoRecord = LiReviewerPOM.reNorecord.getText();
			 if(!item1.equalsIgnoreCase("No items to display")) 
			 {
			String[] bits1 = item1.split(" ");								//Splitting the String
			String compliancesCount1 = bits1[bits1.length - 2];				//Getting the second last word (total number of users)
			int count2 = Integer.parseInt(compliancesCount1);
			String NoRecord = LiReviewerPOM.reNorecord().getText();
			   if(!NoRecord.equalsIgnoreCase("No items to display")) 
			 {
				   try
					{
						performerPOM.clickExcelReport().sendKeys(Keys.PAGE_DOWN);
					}
					catch(Exception e)
					{
						
					}
					js1.executeScript("window.scrollBy(0,1000)");
					
				
					Thread.sleep(100);
					File dir = new File("C://Users//deepalid//Downloads");
					File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
					
					Thread.sleep(500);
					CFOcountPOM.clickNextPage1().sendKeys(Keys.PAGE_UP);
					Thread.sleep(250);
					licenseManagement.licmgmtPOM.WorkspaceExport().click();
					//performerPOM.clickExcelReport().click();					//Clicking on 'Excel Report' image.
					
					
					Thread.sleep(500);
					File dir1 = new File("C://Users//deepalid//Downloads");
					File[] allFilesNew = dir1.listFiles();							//Counting number of files in directory after download
					
					if(dirContents.length < allFilesNew.length)
					{
						test.log(LogStatus.PASS, "File downloaded successfully.");
						
						File lastModifiedFile = allFilesNew[1];			//Storing any 0th index file in 'lastModifiedFile' file name.
					    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
					    {
					       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified()) 	//If allFilesNew[i] file is having large/latest time time of update then latest modified file be allFilesNew[i] file.
					       {
					           lastModifiedFile = allFilesNew[i];
					       }
					    }
						
						Thread.sleep(100);
						fis = new FileInputStream(lastModifiedFile);
						workbook = new XSSFWorkbook(fis);
						sheet = workbook.getSheetAt(0);					//Retrieving first sheet of Workbook
						
						int no = sheet.getLastRowNum();
						Row row = sheet.getRow(no);
						Cell c1 = row.getCell(0);
						int records =(int) c1.getNumericCellValue();
						fis.close();
						
						if(count2 == records)
						{
							//test.log(LogStatus.PASS, "Notice=No of records from grid matches to no of records in Excel Sheet.");
							test.log(LogStatus.PASS, "For "+type+" status total records from Grid = "+count2+" | Total records from Report = "+records);
						}
						else
						{
							//test.log(LogStatus.FAIL, "Notice=No of records from grid doesn't matches to no of records in Excel Sheet.");
							test.log(LogStatus.FAIL, "For "+type+" status total records from Grid = "+count2+" | Total records from Excel Sheet = "+records);
						}
					}
					else
					{
						test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
					}
			 }
          
          MethodPOM.clickMyDashboard().click();
          Thread.sleep(1000);
			  }
			  else
			  {
				   		      
				test.log(LogStatus.PASS,"No Record Found");
				MethodPOM.clickMyDashboard().click();
					      
			  }
				  }
         // MethodPOM.clickActive.click();	
          
        //  Thread.sleep(3000);
	//	LiPerformerPOM.clickAction.click();					//Clicking on first action button.
		
		//progress;
		
		//Thread.sleep(500);
	
		
		/*if(type.equalsIgnoreCase("Internal"))
		{
			WebDriverWait wait1 = new WebDriverWait(getDriver(), (30));
			wait1.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
			LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
			
			
			Select drp = new Select(LiPerformerPOM.clickType());
			drp.selectByIndex(1);
			CFOcountPOM.clickApply1().click();	
			  Thread.sleep(3000);
			MethodPOM.clickActive().click();	
	          
	        Thread.sleep(3000);
			OverduePOM.ActiveAction().click();					//Clicking on first action button.
			//Selecting 2nd value from dropdown.//Selecting 2nd value from dropdown.
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("ContentPlaceHolder1_showReminderDetail"));
			js1.executeScript("window.scrollBy(0,3000)");
			 Thread.sleep(3000);
			wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectInternalDropdown()));
			Select status = new Select(OverduePOM.selectInternalDropdown());	//Selecting Status dropdown box.
			status.selectByIndex(1);	
		
		}
		else
		{
			MethodPOM.clickActive().click();	
	          
	         Thread.sleep(3000);
	         OverduePOM.ActiveAction().click();					//Clicking on first action button.
			                                          //Selecting 2nd value from dropdown.//Selecting 2nd value from dropdown.
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(LiPerformerPOM.ShowFream()));		
			js1.executeScript("window.scrollBy(0,1000)");
		    Thread.sleep(2000);
			wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectStatutoryDropdown()));
			Select status = new Select(OverduePOM.selectStatutoryDropdown());	//Selecting Status dropdown box.
			status.selectByIndex(2);	
		}
		
		try
		{
			Thread.sleep(300);
			wait.until(ExpectedConditions.invisibilityOf(LiPerformerPOM.Progress()));
		}
		catch(Exception e)
		{
			
		}
		
		licenseReviewer.LiReMethodsPOM.perform( test);			//Calling perform method of Reviewer.
		
		try
		{
			Thread.sleep(500);
			LiPerformerPOM.clickCheckbox().click();			//Clicking on checkbox of Penalty values
			js1.executeScript("window.scrollBy(0,300)");
		}
		catch(Exception e)
		{
			
		}
		
		Thread.sleep(500);
		js1.executeScript("window.scrollBy(0,700)");
		Thread.sleep(300);
		OverduePOM.clickComplianceSubmit().click();			//Clicking on 'Submit' button.
		
		Thread.sleep(1000);
		js1.executeScript("window.scrollBy(1000,0)");				//Scrolling down window by 2000 px.
		
		Thread.sleep(300);
		if(type.equalsIgnoreCase("Statutory"))
		{
			
			Thread.sleep(500);
			js1.executeScript("window.scrollBy(2000,0)");	//Scrolling up window by 2000 px.
		}
		else
			{
			test.log(LogStatus.PASS, "Save Sucessfully.");
			 }
getDriver().switchTo().parentFrame();
			
			Thread.sleep(700);
			LiPerformerPOM.clickClose().click();				//Clicking on Close (Cross)
			getDriver().navigate().refresh();
			
			MethodPOM.clickMyDashboard().click();
				  }
			
		/*
		
		//progress;
		Thread.sleep(2000);
		js1.executeScript("window.scrollBy(0,2000)");
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickActive));
		String Active1=MethodPOM.clickActive.getText();
		
	     int Activelicense1 = Integer.parseInt(Active);	//Reading Active count.

	      MethodPOM.clickActive.click();	
		//wait.until(ExpectedConditions.elementToBeClickable(MethodPOM.clickActive));
	    // int total1 = Integer.parseInt(MethodPOM.clickReadExpired.getText());
	      String item2 = MethodPOM.clickReadActive.getText();	//Reading total items String value
			String[] bits2 = item.split(" ");								//Splitting the String
			String LicenseActiveCount2 = bits[bits.length - 2];		//Getting the second last word (total number of users)
			//int total = Integer.parseInt(MethodPOM.clickReadActive.getText());
			int total1 = Integer.parseInt(LicenseActiveCount2);
			if(Activelicense1== total)
		if(total1 < total)
		{
			//test.log(LogStatus.PASS, "Count of records in grid decreased.");
			test.log(LogStatus.PASS, "Old Count = "+total+" | New Count = "+total1);
		}
		else
		{
			//test.log(LogStatus.FAIL, "Count of records in grid doesn't decreased.");
			test.log(LogStatus.FAIL, "Old Count = "+total+" | New Count = "+total1);
		}
		
		Thread.sleep(5000);
		wait.until(ExpectedConditions.elementToBeClickable(MethodPOM.clickMyDashboard));
		 MethodPOM.clickMyDashboard.click();
		
		Thread.sleep(700);
		if(type.equalsIgnoreCase("Internal"))
		{
			wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType));
			LiPerformerPOM.clickType.click();				//Clicking on 'Type' drop down.
			Select drp = new Select(LiPerformerPOM.clickType);
			drp.selectByIndex(1);
			
			progress;
			
			Thread.sleep(500);
			CFOcountPOM.clickApply1.click();				//Clicking on Apply.
		}
		
		Thread.sleep(700);
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickActive));
		int Activelicense2 = Integer.parseInt(MethodPOM.clickActive.getText());	//Reading Active count.
		if(Activelicense2 < total)
		{
			//test.log(LogStatus.PASS, "Dashboard 'Expired' count decreased.");
			test.log(LogStatus.PASS, "Old Count = "+Activelicense+" | New Count = "+Activelicense2);
		}
		else
		{
			//test.log(LogStatus.FAIL, "Dashboard 'Expired' count doesn't decreased.");
			test.log(LogStatus.FAIL, "Old Count = "+Activelicense+" | New Count = "+Activelicense2);
		}

		
		WebDriverWait wait1 = new WebDriverWait(driver, 20);
		progress;
		
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickActive));
		int active = Integer.parseInt(MethodPOM.clickActive.getText());	//Reading Active count.
		
		int pending = Integer.parseInt(MethodPOM.clickActive.getText());
		
		MethodPOM.clickActive.click();					//Clicking on 'Active' image
		
		Thread.sleep(500);
		//wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickAction));
		
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,2000)");				//Scrolling down window by 2000 px.
		MethodPOM.clickReadActive.click();					//Clicking on total items count
		Thread.sleep(500);
		String item1 = MethodPOM.clickReadActive.getText();	//Reading total items String value
		String[] bits1 = item.split(" ");								//Splitting the String
		String LicenseActiveCount1 = bits[bits.length - 2];		//Getting the second last word (total number of users)
		int total2 = Integer.parseInt(LicenseActiveCount1);
		if(active == total)
		{
			//test.log(LogStatus.PASS, "Dashboard 'Active' count matches to total records displayed in Grid.");
			test.log(LogStatus.PASS, "Dashboard 'Active' count = "+active+" | Total records in Grid = "+total);
		}
		else
		{
			//test.log(LogStatus.FAIL, "Dashboard 'Active' count matches doesn't to total records displayed in Grid.");
			test.log(LogStatus.FAIL, "Dashboard 'Active' count = "+active+" | Total records in Grid = "+total);
		}
		
		Thread.sleep(500);
		js.executeScript("window.scrollBy(2000,0)");				//Scrolling up window by 2000 px.
		
	    LiPerformerPOM.clickAction.click();					//Clicking on first Action button.
		
		Thread.sleep(700);
		wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("showdetails"));
		
		Thread.sleep(500);
		js.executeScript("window.scrollBy(0,2000)");				//Scrolling down window by 2000 px.
		
		if(type.equalsIgnoreCase("Internal"))
		{
			wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectInternalDropdown));
			Select status = new Select(OverduePOM.selectInternalDropdown);	//Selecting Status dropdown box.
			status.selectByIndex(1);									//Selecting 2nd value from dropdown.
		}
		else
		{
			wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectStatutoryDropdown));
			Select status = new Select(OverduePOM.selectStatutoryDropdown);	//Selecting Status dropdown box.
			status.selectByIndex(1);									//Selecting 2nd value from dropdown.
		}
		
		progress;
		
		try
		{
			Thread.sleep(500);
			if(type.equalsIgnoreCase("Internal"))
			{
				LiPerformerPOM.clickComplDocInternal.sendKeys("www.google.com");	//Providing Compliance Document link.
			}
			else
			{
				LiPerformerPOM.clickComplDoc.sendKeys("www.google.com");	//Providing Compliance Document link.
			}
			Thread.sleep(500);
			LiPerformerPOM.clickComplDocAddButton.click();				//Clicking on 'Add Link' button
			Thread.sleep(500);
			js.executeScript("arguments[0].scrollIntoView();", OverduePOM.clickComplianceSubmit);
		}
		catch(Exception e)
		{
			
		}
		
		try
		{
			Thread.sleep(500);
			if(type.equalsIgnoreCase("Internal"))
			{
				String workingDir = System.getProperty("user.dir");
				OverduePOM.fileUploadInternal.sendKeys(workingDir+"//Reports//PerformerResults.html");	//Uploading file by sending file to Upload Button. (Internal)
				Thread.sleep(1000);
			}
			else
			{
				String workingDir = System.getProperty("user.dir");
				OverduePOM.fileUploadStatutory.sendKeys(workingDir+"//Reports//PerformerResults.html");	//Uploading file by sending file to Upload Button.
				Thread.sleep(1000);
			}
		}
		catch(Exception e)
		{
			
		}
		
		Thread.sleep(500);
		if(type.equalsIgnoreCase("Internal"))
		{
			OverduePOM.selectDateInternal.click();				//Clicking on Date text box
		}
		else
		{
			OverduePOM.selectDateStatutory.click();				//Clicking on Date text box
		}
		Thread.sleep(300);
		OverduePOM.selectLastMonth.click();					//CLicking on Last month arrow.
		Thread.sleep(300);
		OverduePOM.selectDate2.click();						//Clicking on date at third row and second column
		
		Thread.sleep(500);
		if(type.equalsIgnoreCase("Internal"))
		{
			OverduePOM.clickInternalRemark.sendKeys("Automation Remark");
		}
		else
		{
			OverduePOM.remark.sendKeys("Automation Remark");
		}
		
		Thread.sleep(500);
		OverduePOM.clickComplianceSubmit.click();			//Clicking on 'Submit' button.
		
		Thread.sleep(700);
		if(type.equalsIgnoreCase("Statutory"))
		{
			js.executeScript("window.scrollBy(0,-2000)");
			//js.executeScript("arguments[0].scrollIntoView();", LiPerformerPOM.readMessage);
			wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.readMessage));
			
			Thread.sleep(300);
			String msg = LiPerformerPOM.readMessage.getText();
			if(msg.equalsIgnoreCase("Saved Sucessfully."))
			{
				test.log(LogStatus.PASS, "Message displayed - "+msg);
			}
			else
			{
				test.log(LogStatus.INFO, "Message displayed - "+msg);
			}
		}
		
		driver.switchTo().parentFrame();
		if(type.equalsIgnoreCase("Statutory"))
		{
			Thread.sleep(500);
			LiPerformerPOM.clickClose.click();				//Clicking on Close (Cross)
		}
		
		progress;
		
		Thread.sleep(500);
		wait.until(ExpectedConditions.elementToBeClickable(OverduePOM.clickDashboard));
		OverduePOM.clickDashboard.click();

		Thread.sleep(700);
		if(type.equalsIgnoreCase("Internal"))
		{
			wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType));
			LiPerformerPOM.clickType.click();				//Clicking on 'Type' drop down.
			Select drp = new Select(LiPerformerPOM.clickType);
			drp.selectByIndex(1);
			
			progress;
			
			Thread.sleep(500);
			CFOcountPOM.clickApply1.click();				//Clicking on Apply.
		}
		
		Thread.sleep(700);
		int active1 = Integer.parseInt(MethodPOM.clickActive.getText());	//Reading Active count.
		int pending1 = Integer.parseInt(MethodPOM.clickActive.getText());
		if(active1 < active)
		{
			//test.log(LogStatus.PASS, "Dashboard 'Active' count decreased.");
			test.log(LogStatus.PASS, "Old Count = "+active+" | New Count = "+active1);
		}
		else
		{
			//test.log(LogStatus.FAIL, "Dashboard 'Active' count doesn't decreased.");
			test.log(LogStatus.FAIL, "Old Count = "+active+" | New Count = "+active1);
		}
		
		if(pending1 > pending)
		{
			//test.log(LogStatus.PASS, "Dashboard 'Pending Review' count increased.");
			test.log(LogStatus.PASS, "Old Count = "+pending+" | New Count = "+pending1);
		}
		else
		{
		//test.log(LogStatus.FAIL, "Dashboard 'Pending Review' count doesn't increased.");
			test.log(LogStatus.FAIL, "Old Count = "+pending+" | New Count = "+pending1);
		}
		*/
			
	}
	



	public static void AppliedCount( ExtentTest test, String type) throws InterruptedException, IOException
	{		
		WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		//wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickApplied));
	//	int applied = Integer.parseInt(LiPerformerPOM.clickApplied.getText());	//Reading Applied count.
		
		//LiPerformerPOM.clickApplied.click();	*/		//Clicking on 'Applied'
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickActive()));
		String Active=MethodPOM.clickActive().getText();
		
	     int Activelicense = Integer.parseInt(Active);	//Reading Active count.

	 	wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpiring()));
		String Expiring=MethodPOM.clickExpiring().getText();
		
	     int Expiringlicense = Integer.parseInt(Expiring);	//Reading Expiring count.
	     
	     wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpired()));
			String Expired=MethodPOM.clickExpired().getText();
			
		     int Expiredlicense = Integer.parseInt(Expired);	//Reading Expired count.
		//WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		    

			wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickApplied()));
			int applied = Integer.parseInt(LiPerformerPOM.clickApplied().getText());	//Reading Applied count.
			
	//		String Applied=MethodPOM.clickApplied.getText();
			
		 //    int AppliedLicense = Integer.parseInt(Applied);	//Reading Expired count.

		      MethodPOM.clickApplied().click();					//Clicking on 'Active' image
		      Thread.sleep(4000);
		        JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
				js1.executeScript("window.scroll(0,500)");
				Thread.sleep(4000);
				
				MethodPOM.clickReadApplied().click();					//Clicking on total items count
				Thread.sleep(500);
				String item = MethodPOM.clickReadApplied().getText();	//Reading total items String value
				String[] bits = item.split(" ");								//Splitting the String
				String LicenseAppliedCount = bits[bits.length - 2];		//Getting the second last word (total number of users)
				Thread.sleep(5000);
				//int total = Integer.parseInt(MethodPOM.clickReadActive.getText());
				int total = Integer.parseInt(LicenseAppliedCount);
				if(applied == total)
		{
			//test.log(LogStatus.PASS, "Dashboard 'Applied' count matches to the total records displayed.");
			test.log(LogStatus.PASS, "Dashboard 'Applied' count = "+applied+" | Total records = "+total);
		}
		else
		{
			//test.log(LogStatus.FAIL, "Dashboard 'Applied' count matches doesn't to the total records displayed.");
			test.log(LogStatus.FAIL, "Dashboard 'Applied' count = "+applied+" | Total records = "+total);
		}
		
		Thread.sleep(300);
		MethodPOM.ClickActiveOverview().click();
		test.log(LogStatus.PASS, "License Overview Details Successfully.");
		Thread.sleep(3000);
		MethodPOM.ClickCloseOverview().click();
		
		LiPerformerPOM.editlicenseicon().click();
		Thread.sleep(7000);
		//licenseManagement.licmgmtPOM.LicenseTitle().clear();
		Thread.sleep(5000);
		licenseManagement.licmgmtPOM.LicenseTitle().sendKeys("1");	
		Thread.sleep(3000);
		//licenseManagement.licmgmtPOM.LicenseNo().clear();
		Thread.sleep(3000);
		licenseManagement.licmgmtPOM.LicenseNo().sendKeys("1");
		Thread.sleep(5000);
		js1.executeScript("window.scrollBy(1000,0)");
		Thread.sleep(5000);
		licenseManagement.licmgmtPOM.Nomineesubmit().click();
		 // Switching to Alert       
        Alert alert = getDriver().switchTo().alert();
       
        // Capturing alert message.   
        String alertMessage= getDriver().switchTo().alert().getText();
       
        Thread.sleep(5000);

        // Accepting alert
        alert.accept();
        test.log(LogStatus.PASS,"License Details Updated Successfully." );
        
          Thread.sleep(5000);
          
          licmgmtPOM.editlicenseclose().click();
          Thread.sleep(300);
          js1.executeScript("window.scrollBy(0,2000)");				//Scrolling down window by 2000 px.
			
		  Thread.sleep(10000);
			CFOcountPOM.readTotalItems1().click();
			
			String item2 = CFOcountPOM.readTotalItems1().getText();
			//String NoRecord = LiReviewerPOM.reNorecord.getText();
			 if(!item2.equalsIgnoreCase("No items to display")) 
			 {
			String[] bits1 = item2.split(" ");								//Splitting the String
			String compliancesCount1 = bits1[bits1.length - 2];				//Getting the second last word (total number of users)
			int count2 = Integer.parseInt(compliancesCount1);
			String NoRecord = LiReviewerPOM.reNorecord().getText();
			   if(!NoRecord.equalsIgnoreCase("No items to display")) 
			 {
				   try
					{
						performerPOM.clickExcelReport().sendKeys(Keys.PAGE_DOWN);
					}
					catch(Exception e)
					{
						
					}
					js1.executeScript("window.scrollBy(0,1000)");
					
				
					Thread.sleep(100);
					File dir = new File("C://Users//deepalid//Downloads");
					File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
					
					Thread.sleep(500);
					CFOcountPOM.clickNextPage1().sendKeys(Keys.PAGE_UP);
					Thread.sleep(250);
					licenseManagement.licmgmtPOM.WorkspaceExport().click();
					//performerPOM.clickExcelReport().click();					//Clicking on 'Excel Report' image.
					
					
					Thread.sleep(500);
					File dir1 = new File("C://Users//deepalid//Downloads");
					File[] allFilesNew = dir1.listFiles();							//Counting number of files in directory after download
					
					if(dirContents.length < allFilesNew.length)
					{
						test.log(LogStatus.PASS, "File downloaded successfully.");
						
						File lastModifiedFile = allFilesNew[1];			//Storing any 0th index file in 'lastModifiedFile' file name.
					    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
					    {
					       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified()) 	//If allFilesNew[i] file is having large/latest time time of update then latest modified file be allFilesNew[i] file.
					       {
					           lastModifiedFile = allFilesNew[i];
					       }
					    }
						
						Thread.sleep(100);
						fis = new FileInputStream(lastModifiedFile);
						workbook = new XSSFWorkbook(fis);
						sheet = workbook.getSheetAt(0);					//Retrieving first sheet of Workbook
						
						int no = sheet.getLastRowNum();
						Row row = sheet.getRow(no);
						Cell c1 = row.getCell(0);
						int records =(int) c1.getNumericCellValue();
						fis.close();
						
						if(count2 == records)
						{
							//test.log(LogStatus.PASS, "Notice=No of records from grid matches to no of records in Excel Sheet.");
							test.log(LogStatus.PASS, "For "+type+" status total records from Grid = "+count2+" | Total records from Report = "+records);
						}
						else
						{
							//test.log(LogStatus.FAIL, "Notice=No of records from grid doesn't matches to no of records in Excel Sheet.");
							test.log(LogStatus.FAIL, "For "+type+" status total records from Grid = "+count2+" | Total records from Excel Sheet = "+records);
						}
					}
					else
					{
						test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
					}
			 
			   Thread.sleep(5000);
        MethodPOM.clickMyDashboard().click();
        Thread.sleep(1000);
           MethodPOM.clickApplied().click();
       // Thread.sleep(5000);
		//LiPerformerPOM.clickAction.click();					//Clicking on first action button.
		
		progress();
		
		Thread.sleep(500);
		//wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("showdetails"));
		
		//licenseReviewer.LiReMethodsPOM.perform(driver, test);		//Calling perform method of Reviewer.
		
		if(type.equalsIgnoreCase("Internal"))
		{
			WebDriverWait wait1 = new WebDriverWait( getDriver(), (30));
			wait1.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
			LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
			
			
			Select drp = new Select(LiPerformerPOM.clickType());
			drp.selectByIndex(1);
			CFOcountPOM.clickApply1().click();	
			  Thread.sleep(3000);
		     MethodPOM.clickApplied().click();
		         Thread.sleep(1000);
    
				
				LiPerformerPOM.AppliedActionin().click();					//Clicking on first action button.
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("ContentPlaceHolder1_showReminderDetail"));
			js1.executeScript("window.scroll(0,500)");	
			LiPerformerPOM.LicenseNo().sendKeys("234");
			Thread.sleep(500);
			LiPerformerPOM.Licensetitle().sendKeys("License234");
			Thread.sleep(500);
			LiPerformerPOM.AppliedStartDateclick().click();
			Thread.sleep(500);
			LiPerformerPOM.AppliedStartDate().click();
			Thread.sleep(3000);
		   LiPerformerPOM.AppliedEndDateclick().click();
		   Thread.sleep(3000);
		   LiPerformerPOM.AppliedEndDate().click();
		   String workingDir = System.getProperty("user.dir");
			LiPerformerPOM.UploadDocument().sendKeys(workingDir+"//Reports//CriticalReport//LicCompanyadminResult(Internal).html");	//uploading new file		
			Thread.sleep(500);
		}
		else
		{
			//  MethodPOM.clickMyDashboard().click();
			// MethodPOM.clickApplied().click();
				Thread.sleep(5000);
			LiPerformerPOM.AppliedAction().click();					//Clicking on first action button.
			Thread.sleep(3000);
		wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("ContentPlaceHolder1_showReminderDetail"));
		//js1.executeScript("window.scroll(0,500)");	
		Thread.sleep(3000);
		LiPerformerPOM.LicenseNo().sendKeys("20-1");
		Thread.sleep(500);
		LiPerformerPOM.Licensetitle().sendKeys("Licetse2");
		Thread.sleep(500);
		LiPerformerPOM.AppliedStartDateclick().click();
		Thread.sleep(500);
		LiPerformerPOM.NextDateClick().click();
		Thread.sleep(5000);
		LiPerformerPOM.AppliedStartDate().click();
		Thread.sleep(5000);
	   LiPerformerPOM.AppliedEndDateclick().click();
	   Thread.sleep(5000);
		LiPerformerPOM.NextDateClick().click();
		  Thread.sleep(3000);
	   LiPerformerPOM.AppliedEndDate().click();
	   Thread.sleep(3000);
	   String workingDir = System.getProperty("user.dir");
		LiPerformerPOM.UploadDocument().sendKeys(workingDir+"//TestData//ComplianceSheet.xlsx");	//uploading new file		
		Thread.sleep(500);
	   
		}
			
		//	Thread.sleep(500);
			//LiPerformerPOM.clickComplDoc.clear();
			//LiPerformerPOM.clickComplDoc.sendKeys("www.google.com");	//Providing compliance document link.
		
		
		
	//	Thread.sleep(300);
		OverduePOM.AppliedSubmit().click();			//Clicking on 'Submit' button.
		/*try
		{
			Thread.sleep(500);
			driver.switchTo().alert().dismiss();
		}
		catch(Exception e)
		{
			
		}
		*/
		Thread.sleep(500);
	     	js1.executeScript("window.scrollBy(2000,0)");				//Scrolling down window by 2000 px.
		
		if(type.equalsIgnoreCase("Statutory"))
		try
		{
			String msg = LiPerformerPOM.readMsg().getText();
			if(msg.equalsIgnoreCase("Compliance Created and Assigned Sucessfully"))
			{
				test.log(LogStatus.PASS, "Message Displayed = "+msg);
			}
			else
			{
				test.log(LogStatus.FAIL, "Message Displayed = "+msg);
			}
		}
		catch(Exception e)
		{
			
		}
		
		//driver.switchTo().parentFrame();
		
		Thread.sleep(500);
	     				//Scrolling down window by 1000 px.
	/*	String workingDir = System.getProperty("user.dir");
		//LiPerformerPOM.UploadDocument.sendKeys(workingDir+"//Reports//PerformerResults.html");	//uploading new file		
		//Thread.sleep(500);
		*/
		//OverduePOM.AppliedSubmit.click();			//Clicking on 'Submit' button.
		Thread.sleep(500);
		
		//OverduePOM.clickDashboard().click();
		// js1.executeScript("window.scrollBy(0,1000)");
		getDriver().switchTo().parentFrame();
		Thread.sleep(5000);
		LiPerformerPOM.clickClose().click();				//Clicking on Close (Cross)
		
		progress();
		
		Thread.sleep(500);
	wait.until(ExpectedConditions.elementToBeClickable(MethodPOM.clickMyDashboard()));
	MethodPOM.clickMyDashboard().click();
		

		if(type.equalsIgnoreCase("Internal"))			//Opening 'Internal' Dashboard
		{
			Thread.sleep(500);
			wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
			LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
			
			Select drp = new Select(LiPerformerPOM.clickType());
			drp.selectByIndex(1);
			
			progress();
			
			Thread.sleep(500);
			CFOcountPOM.clickApply1().click();				//Clicking on Apply.
		}
		
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickActive()));
		int applied1 = Integer.parseInt(LiPerformerPOM.clickApplied().getText());	//Reading Active count.
		if(applied1 < applied)
		{
			test.log(LogStatus.PASS, "Dashboard 'Applied' count decreased.");
			test.log(LogStatus.PASS, "Old Count = "+applied+". New Count = "+applied1);
		}
		else
		{
			test.log(LogStatus.FAIL, "Dashboard 'Applied' count doesn't decreased.");
			test.log(LogStatus.FAIL, "Old Count = "+applied+"| New Count = "+applied1);
		}
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickActive()));
		String ActiveOne=MethodPOM.clickActive().getText();
		
	     int ActivelicenseOne = Integer.parseInt(Active);	//Reading Active count.

	 	wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpiring()));
		String ExpiringOne=MethodPOM.clickExpiring().getText();
		
	     int ExpiringlicenseOne = Integer.parseInt(Expiring);	//Reading Expiring count.
	     
	     wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpired()));
			String ExpiredOne=MethodPOM.clickExpired().getText();
			
		     int ExpiredlicenseOne = Integer.parseInt(Expired);	//Reading Expired count.
		WebDriverWait wait1 = new WebDriverWait( getDriver(), (30));
			
		     if(Activelicense>ActivelicenseOne&&Expiredlicense>ExpiredlicenseOne&&Expiringlicense>ExpiringlicenseOne)
		     {
		    	 test.log(LogStatus.PASS, "Active Old Count = "+Activelicense+" | New Count = "+ActivelicenseOne);
		         test.log(LogStatus.PASS, "Expired Old Count = "+Expiredlicense+" | New Count = "+ExpiredlicenseOne);
		         test.log(LogStatus.PASS, "Expiring Old Count = "+Expiringlicense+" | New Count = "+ExpiringlicenseOne);
		     }
		     else
		     {
		    	 test.log(LogStatus.PASS, "Active Old Count = "+Activelicense+" | New Count = "+ActivelicenseOne);
		         test.log(LogStatus.PASS, "Expired Old Count = "+Expiredlicense+" | New Count = "+ExpiredlicenseOne);
		         test.log(LogStatus.PASS, "Expiring Old Count = "+Expiringlicense+" | New Count = "+ExpiringlicenseOne);		     }
		
			 }
			   
			 }
	}
	
	public static void ExpiringCount( ExtentTest test, String type) throws InterruptedException, IOException
	{		
		WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		progress();
		
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpiring()));
		String Expiring=MethodPOM.clickExpiring().getText();
		
	     int Expiringlicense = Integer.parseInt(Expiring);	//Reading Active count.
		
		LiPerformerPOM.clickExpiring().click();						//Clicking on 'Expiring'
		   Thread.sleep(4000);
	        JavascriptExecutor js1=(JavascriptExecutor)getDriver() ;
			js1.executeScript("window.scroll(0,500)");
			Thread.sleep(4000);
			String item1 = MethodPOM.clickReadExpired().getText();	//Reading total items String value
			  if(!item1.equalsIgnoreCase("No items to display"))
			  {
			MethodPOM.clickReadExpiring().click();					//Clicking on total items count
			Thread.sleep(500);
			String item = MethodPOM.clickReadExpiring().getText();	//Reading total items String value
			String[] bits = item.split(" ");								//Splitting the String
			String LicenseExpiringCount = bits[bits.length - 2];		//Getting the second last word (total number of users)
			
			//int total = Integer.parseInt(MethodPOM.clickReadActive.getText());
			int total = Integer.parseInt(LicenseExpiringCount);
			if(Expiringlicense == total)
				{
					//test.log(LogStatus.PASS, "Number of Expiring License  grid matches to Dashboard Expiring  License   Count.");
					test.log(LogStatus.PASS, "No of Expiring  License  in the grid = "+total+" | Dashboard Expiring License  Count = "+Expiringlicense);
				}
				else
				{
					//test.log(LogStatus.FAIL, "Number of Expiring License does not matches to Dashboard Expiring License   Count.");
					test.log(LogStatus.FAIL, "No of Expiring License  in the grid = "+total+" | Dashboard Expiring License  Count = "+Expiringlicense);
				}
				Thread.sleep(3000);
				//js1.executeScript("window.scrollBy(2000,0)");     //Scrolling UP window by 2000 px.
				//Thread.sleep(3000);
				
				MethodPOM.ClickActiveOverview().click();
				test.log(LogStatus.PASS, "Expiring License Overview Details Successfully");
				Thread.sleep(3000);
				MethodPOM.ClickCloseOverview().click();
				LiPerformerPOM.editlicenseicon().click();
				Thread.sleep(7000);
				licenseManagement.licmgmtPOM.LicenseTitle().clear();
				Thread.sleep(5000);
				licenseManagement.licmgmtPOM.LicenseTitle().sendKeys(".");
				Thread.sleep(5000);
				licenseManagement.licmgmtPOM.LicenseNo().sendKeys(".");
				Thread.sleep(5000);
				js1.executeScript("window.scrollBy(1000,0)");
				Thread.sleep(5000);
				licenseManagement.licmgmtPOM.Nomineesubmit().click();
				 // Switching to Alert       
		        Alert alert = getDriver().switchTo().alert();
		       
		        // Capturing alert message.   
		        String alertMessage= getDriver().switchTo().alert().getText();
		       
		        Thread.sleep(5000);

		        // Accepting alert
		        alert.accept();
		        test.log(LogStatus.PASS,"License Details Updated Successfully" );
		        
		          Thread.sleep(5000);
		          
		          licmgmtPOM.editlicenseclose().click();
		          Thread.sleep(300);
		       //  MethodPOM.clickMyDashboard().click();
		       //  Thread.sleep(10000);
					CFOcountPOM.readTotalItems1().click();
					
					String item2 = CFOcountPOM.readTotalItems1().getText();
					//String NoRecord = LiReviewerPOM.reNorecord.getText();
					 if(!item1.equalsIgnoreCase("No items to display")) 
					 {
					String[] bits1 = item1.split(" ");								//Splitting the String
					String compliancesCount1 = bits1[bits1.length - 2];				//Getting the second last word (total number of users)
					int count2 = Integer.parseInt(compliancesCount1);
					String NoRecord = LiReviewerPOM.reNorecord().getText();
					   if(!NoRecord.equalsIgnoreCase("No items to display")) 
					 {
						   try
							{
								performerPOM.clickExcelReport().sendKeys(Keys.PAGE_DOWN);
							}
							catch(Exception e)
							{
								
							}
							js1.executeScript("window.scrollBy(0,1000)");
							
						
							Thread.sleep(100);
							File dir = new File("C://Users//deepalid//Downloads");
							File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
							
							Thread.sleep(500);
							CFOcountPOM.clickNextPage1().sendKeys(Keys.PAGE_UP);
							Thread.sleep(250);
							licenseManagement.licmgmtPOM.WorkspaceExport().click();
							//performerPOM.clickExcelReport().click();					//Clicking on 'Excel Report' image.
							
							
							Thread.sleep(500);
							File dir1 = new File("C://Users//deepalid//Downloads");
							File[] allFilesNew = dir1.listFiles();							//Counting number of files in directory after download
							
							if(dirContents.length < allFilesNew.length)
							{
								test.log(LogStatus.PASS, "File downloaded successfully.");
								
								File lastModifiedFile = allFilesNew[1];			//Storing any 0th index file in 'lastModifiedFile' file name.
							    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
							    {
							       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified()) 	//If allFilesNew[i] file is having large/latest time time of update then latest modified file be allFilesNew[i] file.
							       {
							           lastModifiedFile = allFilesNew[i];
							       }
							    }
								
								Thread.sleep(100);
								fis = new FileInputStream(lastModifiedFile);
								workbook = new XSSFWorkbook(fis);
								sheet = workbook.getSheetAt(0);					//Retrieving first sheet of Workbook
								
								int no = sheet.getLastRowNum();
								Row row = sheet.getRow(no);
								Cell c1 = row.getCell(0);
								int records =(int) c1.getNumericCellValue();
								fis.close();
								
								if(count2 == records)
								{
									//test.log(LogStatus.PASS, "Notice=No of records from grid matches to no of records in Excel Sheet.");
									test.log(LogStatus.PASS, "For "+type+" status total records from Grid = "+count2+" | Total records from Report = "+records);
								}
								else
								{
									//test.log(LogStatus.FAIL, "Notice=No of records from grid doesn't matches to no of records in Excel Sheet.");
									test.log(LogStatus.FAIL, "For "+type+" status total records from Grid = "+count2+" | Total records from Excel Sheet = "+records);
								}
							}
							else
							{
								test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
							}
							}
					   else
						  {
							   		      
							test.log(LogStatus.PASS,"No Record Found");
							MethodPOM.clickMyDashboard().click();
								      
						  }
						
		          MethodPOM.clickMyDashboard().click();
		          Thread.sleep(1000);
					 }
					  }
					  
		        //  MethodPOM.clickExpiring.click();	
		          
		         // Thread.sleep(3000);
				//LiPerformerPOM.clickAction.click();					//Clicking on first action button.
				
			//	progress;
				
				//Thread.sleep(500);
			
				
			/*	if(type.equalsIgnoreCase("Internal"))
				{
					WebDriverWait wait1= new WebDriverWait(driver, 5);
					wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType));
					LiPerformerPOM.clickType.click();				//Clicking on 'Type' drop down.
					
					
					Select drp = new Select(LiPerformerPOM.clickType);
					drp.selectByIndex(1);
					CFOcountPOM.clickApply1.click();	
					Thread.sleep(500);
					
					  MethodPOM.clickExpiring.click();	
			          
			          Thread.sleep(3000);
					LiPerformerPOM.ExpiredAction.click();					//Clicking on first action button.
					wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("ContentPlaceHolder1_showReminderDetail"));
					js1.executeScript("window.scrollBy(0,3000)");
					wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectInternalDropdown));
					Select status = new Select(OverduePOM.selectInternalDropdown);	//Selecting Status dropdown box.
					status.selectByIndex(2);									//Selecting 2nd value from dropdown.
				}
				else
				{
					  MethodPOM.clickExpiring.click();	
			          
			          Thread.sleep(3000);
					LiPerformerPOM.clickAction.click();					//Clicking on first action button.
					
					wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(LiPerformerPOM.ShowFream));		
					js1.executeScript("window.scrollBy(0,1000)");
				    Thread.sleep(2000);
					wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectStatutoryDropdown));
					Select status = new Select(OverduePOM.selectStatutoryDropdown);	//Selecting Status dropdown box.
					status.selectByIndex(2);									//Selecting 2nd value from dropdown.
				}
				
				try
				{
					Thread.sleep(300);
					wait.until(ExpectedConditions.invisibilityOf(LiPerformerPOM.Progress));
				}
				catch(Exception e)
				{
					
				}
				
				licenseReviewer.LiReMethodsPOM.perform(driver, test);			//Calling perform method of Reviewer.
				
				try
				{
					Thread.sleep(500);
					LiPerformerPOM.clickCheckbox.click();			//Clicking on checkbox of Penalty values
					js1.executeScript("window.scrollBy(0,300)");
				}
				catch(Exception e)
				{
					
				}
				
				Thread.sleep(500);
				js1.executeScript("window.scrollBy(0,700)");
				Thread.sleep(300);
				OverduePOM.clickComplianceSubmit.click();			//Clicking on 'Submit' button.
				
				Thread.sleep(1000);
				js1.executeScript("window.scrollBy(1000,0)");				//Scrolling down window by 2000 px.
				
				Thread.sleep(300);
				if(type.equalsIgnoreCase("Statutory"))
				{
					String msg = LiPerformerPOM.readMessage.getText();
					if(msg.equalsIgnoreCase("Save Sucessfully."))
					{
						test.log(LogStatus.PASS, "Message Displayed = "+msg);
					}
					else
					{
						test.log(LogStatus.FAIL, "Message Displayed = "+msg);
					}
					
					Thread.sleep(500);
					js1.executeScript("window.scrollBy(2000,0)");			//Scrolling up window by 2000 px.
				}
				else
			        	{
						test.log(LogStatus.PASS, "Save Sucessfully.");
						 }
						driver.switchTo().parentFrame();
						
					
					Thread.sleep(700);
					LiPerformerPOM.clickClose.click();				//Clicking on Close (Cross)
					driver.navigate().refresh();
					MethodPOM.clickMyDashboard.click();
					
				}
			  else
			  {
				     
					test.log(LogStatus.PASS,"No Record Found");
					MethodPOM.clickMyDashboard.click();
				  }
			  }
	
		
	/*	progress;
		
		Thread.sleep(300);
		wait.until(ExpectedConditions.visibilityOf(LiReviewerPOM.checkTable));
		Thread.sleep(500);
		int flag = 0;
		try
		{
			if(LiPerformerPOM.clickAction.isDisplayed())
			{
				flag = 1;
			}
		}
		catch(Exception e)
		{
			
		}
		if(flag == 1)
		{
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("window.scrollBy(0,2000)");				//Scrolling down window by 2000 px.
			
			int total = Integer.parseInt(OverduePOM.readReminder.getText());
			if(expiring == total)
			{
				test.log(LogStatus.PASS, "Dashboard 'Expiring' count matches to total records displayed. Total records = "+total);
			}
			else
			{
				test.log(LogStatus.FAIL, "Dashboard 'Expiring' count matches doesn't to total records displayed. Total records = "+total);
			}
			
			Thread.sleep(300);
			LiPerformerPOM.clickAction.click();					//Clicking on first action button.
			
			progress;
			
			Thread.sleep(500);
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("showdetails"));
			
			Thread.sleep(500);
			if(type.equalsIgnoreCase("Statutory"))
			{
				js.executeScript("window.scrollBy(0,700)");
				wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectStatutoryDropdown));
				Select status = new Select(OverduePOM.selectStatutoryDropdown);	//Selecting Status dropdown box.
				status.selectByIndex(2);									//Selecting 2nd value from dropdown.
			}
			else
			{
				js.executeScript("window.scrollBy(0,500)");
				wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectInternalDropdown));
				Select status = new Select(OverduePOM.selectInternalDropdown);	//Selecting Status dropdown box.
				status.selectByIndex(2);									//Selecting 2nd value from dropdown.
			}
			
			progress;
			
			licenseReviewer.LiReMethodsPOM.perform(driver, test);		//Calling perform method of Reviewer.
			
			try
			{
				Thread.sleep(500);
				LiPerformerPOM.clickCheckbox.click();			//Clicking on checkbox of Penalty values
			}
			catch(Exception e)
			{
				
			}
			Thread.sleep(1000);
			js.executeScript("window.scrollBy(0,500)");				//Scrolling down window by 2000 px.
			
			Thread.sleep(500);
			OverduePOM.clickComplianceSubmit.click();			//Clicking on 'Submit' button.
			
			Thread.sleep(1000);
			js.executeScript("window.scrollBy(0,-1000)");				//Scrolling down window by 2000 px.
			
			if(type.contains("Statutory"))
			{
				Thread.sleep(300);
				LiPerformerPOM.readMessage.click();
				String msg = LiPerformerPOM.readMessage.getText();
				if(msg.equalsIgnoreCase("Save Sucessfully."))
				{
					test.log(LogStatus.PASS, "Message Displayed = "+msg);
				}
				else
				{
					test.log(LogStatus.PASS, "Message Displayed = "+msg);
				}
				
				driver.switchTo().parentFrame();
				Thread.sleep(500);
				LiPerformerPOM.clickClose.click();				//Clicking on Close (Cross)
				
				progress;
			}
		}
		else
		{
			test.log(LogStatus.SKIP, "No records to perform task.");
		}
		
		Thread.sleep(500);
		wait.until(ExpectedConditions.elementToBeClickable(OverduePOM.clickDashboard));
		OverduePOM.clickDashboard.click();
		
		if(type.contains("Internal"))
		{
			WebDriverWait wait1 = new WebDriverWait(driver, 5);
			wait1.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType));
			LiPerformerPOM.clickType.click();				//Clicking on 'Type' drop down.
			
			Select drp = new Select(LiPerformerPOM.clickType);
			drp.selectByIndex(1);
			
			try
			{
				Thread.sleep(400);
				wait.until(ExpectedConditions.invisibilityOf(LiPerformerPOM.Progress));
			}
			catch(Exception e)
			{
				
			}
			
			Thread.sleep(500);
			CFOcountPOM.clickApply1.click();				//Clicking on Apply.
		}
		
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickExpiring));
		int expiring1 = Integer.parseInt(LiPerformerPOM.clickExpiring.getText());	//Reading Active count.
		int pending1 = Integer.parseInt(LiPerformerPOM.clickPendingForReview.getText());
		
		if(expiring1 < expiring)
		{
			test.log(LogStatus.PASS, "Dashboard 'Expiring' count decreased.");
			test.log(LogStatus.INFO, "Old count = "+expiring+" | New Count = "+expiring1);
		}
		else
		{
			test.log(LogStatus.FAIL, "Dashboard 'Expiring' count doesn't decreased.");
			test.log(LogStatus.INFO, "Old count = "+expiring+" | New Count = "+expiring1);
		}
		if(pending1 > pending)
		{
			test.log(LogStatus.PASS, "Dashboard 'Pending Review' count increased.");
			test.log(LogStatus.INFO, "Old Count = "+pending+" | New Count = "+pending1);
		}
		else
		{
			test.log(LogStatus.FAIL, "Dashboard 'Pending Review' count doesn't increased.");
			test.log(LogStatus.INFO, "Old Count = "+pending+" | New Count = "+pending1);
		}*/
	
			  }
	
	public static void ExpiredCount( ExtentTest test, String type) throws InterruptedException, IOException
	{		
		/*WebDriverWait wait = new WebDriverWait(driver, 20);
		
		progress;
		
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickExpired));
		int expired = Integer.parseInt(LiPerformerPOM.clickExpired.getText());	//Reading Expiring count.
		
		LiPerformerPOM.clickExpired.click();						//Clicking on 'Expiring'
		
		progress;
		
		Thread.sleep(300);
		wait.until(ExpectedConditions.visibilityOf(LiReviewerPOM.checkTable));
		
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,2000)");				//Scrolling down window by 2000 px.
		
		int total = Integer.parseInt(OverduePOM.readReminder.getText());
		if(expired == total)*/
		WebDriverWait wait = new WebDriverWait( getDriver(), (30));
			
			wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpired()));
			String Expired=MethodPOM.clickExpired().getText();
			
		     int Expiredlicense = Integer.parseInt(Expired);	//Reading Expired count.
		 	   Thread.sleep(4000);
		      MethodPOM.clickExpired().click();					//Clicking on 'Expired' image
		      Thread.sleep(4000);
		        JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
				js1.executeScript("window.scroll(0,500)");
				Thread.sleep(4000);
				
				MethodPOM.clickReadExpired().click();					//Clicking on total items count
				Thread.sleep(4000);
				String item = MethodPOM.clickReadExpired().getText();	//Reading total items String value
				String[] bits = item.split(" ");								//Splitting the String
				String LicenseExpiredCount = bits[bits.length - 2];		//Getting the second last word (total number of users)
				 Thread.sleep(5000);
				//int total = Integer.parseInt(MethodPOM.clickReadActive.getText());
				int total = Integer.parseInt(LicenseExpiredCount);
				if(Expiredlicense == total)
		{
			//test.log(LogStatus.PASS, "Dashboard 'Expired' count matches to the total records displayed in grid.");
			test.log(LogStatus.PASS, "Dashboard 'Expired' count = "+Expiredlicense+" | Total records in grid = "+total);
		}
		else
		{
			//test.log(LogStatus.FAIL, "Dashboard 'Expired' count doesn't matches to the total records displayed in grid.");
			test.log(LogStatus.FAIL, "Dashboard 'Expired' count = "+Expiredlicense+" | Total records in grid = "+total);
		}
		
				MethodPOM.ClickActiveOverview().click();
				test.log(LogStatus.PASS, " License Overview Details Successfully");
				Thread.sleep(3000);
				MethodPOM.ClickCloseOverview().click();
				Thread.sleep(3000);
				LiPerformerPOM.editlicenseicon().click();
				Thread.sleep(7000);
				//licenseManagement.licmgmtPOM.LicenseTitle.clear();
				Thread.sleep(5000);
				licenseManagement.licmgmtPOM.LicenseTitle().sendKeys(".");	
				Thread.sleep(5000);
				licenseManagement.licmgmtPOM.LicenseNo().sendKeys(".");
				Thread.sleep(5000);
				js1.executeScript("window.scrollBy(1000,0)");
				Thread.sleep(3000);
				licenseManagement.licmgmtPOM.Nomineesubmit().click();
				 // Switching to Alert       
		        Alert alert = getDriver().switchTo().alert();
		       
		        // Capturing alert message.   
		        String alertMessage= getDriver().switchTo().alert().getText();
		       
		        Thread.sleep(3000);

		        // Accepting alert
		        alert.accept();
		        test.log(LogStatus.PASS,"License Details Updated Successfully" );
		        
		          Thread.sleep(5000);
		          
		          licmgmtPOM.editlicenseclose().click();
		          Thread.sleep(3000);
		      	js1.executeScript("window.scrollBy(0,1000)");
					CFOcountPOM.readTotalItems1().click();
					
					String item1 = CFOcountPOM.readTotalItems1().getText();
					//String NoRecord = LiReviewerPOM.reNorecord.getText();
					 if(!item1.equalsIgnoreCase("No items to display")) 
					 {
					String[] bits1 = item1.split(" ");								//Splitting the String
					String compliancesCount1 = bits1[bits1.length - 2];				//Getting the second last word (total number of users)
					int count2 = Integer.parseInt(compliancesCount1);
					String NoRecord = LiReviewerPOM.reNorecord().getText();
					   if(!NoRecord.equalsIgnoreCase("No items to display")) 
					 {
						   try
							{
								performerPOM.clickExcelReport().sendKeys(Keys.PAGE_DOWN);
							}
							catch(Exception e)
							{
								
							}
							js1.executeScript("window.scrollBy(0,1000)");
							
						
							Thread.sleep(100);
							File dir = new File("C://Users//deepalid//Downloads");
							File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
							
							Thread.sleep(500);
							CFOcountPOM.clickNextPage1().sendKeys(Keys.PAGE_UP);
							Thread.sleep(250);
							licenseManagement.licmgmtPOM.WorkspaceExport().click();
							//performerPOM.clickExcelReport().click();					//Clicking on 'Excel Report' image.
							
							
							Thread.sleep(500);
							File dir1 = new File("C://Users//deepalid//Downloads");
							File[] allFilesNew = dir1.listFiles();							//Counting number of files in directory after download
							
							if(dirContents.length < allFilesNew.length)
							{
								test.log(LogStatus.PASS, "File downloaded successfully.");
								
								File lastModifiedFile = allFilesNew[1];			//Storing any 0th index file in 'lastModifiedFile' file name.
							    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
							    {
							       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified()) 	//If allFilesNew[i] file is having large/latest time time of update then latest modified file be allFilesNew[i] file.
							       {
							           lastModifiedFile = allFilesNew[i];
							       }
							    }
								
								Thread.sleep(100);
								fis = new FileInputStream(lastModifiedFile);
								workbook = new XSSFWorkbook(fis);
								sheet = workbook.getSheetAt(0);					//Retrieving first sheet of Workbook
								
								int no = sheet.getLastRowNum();
								Row row = sheet.getRow(no);
								Cell c1 = row.getCell(0);
								int records =(int) c1.getNumericCellValue();
								fis.close();
								
								if(count2 == records)
								{
									//test.log(LogStatus.PASS, "Notice=No of records from grid matches to no of records in Excel Sheet.");
									test.log(LogStatus.PASS, "For "+type+" status total records from Grid = "+count2+" | Total records from Report = "+records);
								}
								else
								{
									//test.log(LogStatus.FAIL, "Notice=No of records from grid doesn't matches to no of records in Excel Sheet.");
									test.log(LogStatus.FAIL, "For "+type+" status total records from Grid = "+count2+" | Total records from Excel Sheet = "+records);
								}
							}
							else
							{
								test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
							}
					 }
		          
		          MethodPOM.clickMyDashboard().click();
		          Thread.sleep(1000);
					  }
					  else
					  {
						   		      
						test.log(LogStatus.PASS,"No Record Found");
						MethodPOM.clickMyDashboard().click();
							      
					  }
						  
		          MethodPOM.clickMyDashboard().click();

		         
		    //   Thread.sleep(3000);
		    //   MethodPOM.clickExpired.click();
		          
				
	/*	Thread.sleep(5000);
		//LiPerformerPOM.clickAction.click();					//Clicking on first action button.
		
		progress;
		
		Thread.sleep(500);
		//wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("showdetails"));
		
	/*	if(type.equalsIgnoreCase("Internal"))
		{
			WebDriverWait wait1 = new WebDriverWait(driver, 5);
			wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType));
			LiPerformerPOM.clickType.click();				//Clicking on 'Type' drop down.
			
			Select drp = new Select(LiPerformerPOM.clickType);
			drp.selectByIndex(1);
			Thread.sleep(500);
			CFOcountPOM.clickApply1.click();
			
			  MethodPOM.clickExpired.click();
				
				Thread.sleep(5000);
				LiPerformerPOM.ExpiredAction.click();					//Clicking on first action button.
				wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("ContentPlaceHolder1_showReminderDetail"));
				js1.executeScript("window.scrollBy(0,3000)");
			    Thread.sleep(2000);
			wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectInternalDropdown));
			Select status = new Select(OverduePOM.selectInternalDropdown);	//Selecting Status dropdown box.
			status.selectByIndex(2);									//Selecting 2nd value from dropdown.
		}
		else
		{
			
			  MethodPOM.clickExpired.click();
				
				Thread.sleep(5000);
				LiPerformerPOM.clickAction.click();					//Clicking on first action button.
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(LiPerformerPOM.ShowFream));		
			js1.executeScript("window.scrollBy(0,1000)");
		    Thread.sleep(2000);
			wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectStatutoryDropdown));
			Select status = new Select(OverduePOM.selectStatutoryDropdown);	//Selecting Status dropdown box.
			status.selectByIndex(2);									//Selecting 2nd value from dropdown.
		}
		
		try
		{
			Thread.sleep(300);
			wait.until(ExpectedConditions.invisibilityOf(LiPerformerPOM.Progress));
		}
		catch(Exception e)
		{
			
		}
		
		licenseReviewer.LiReMethodsPOM.perform(driver, test);			//Calling perform method of Reviewer.
		
		try
		{
			Thread.sleep(500);
			LiPerformerPOM.clickCheckbox.click();			//Clicking on checkbox of Penalty values
			js1.executeScript("window.scrollBy(0,300)");
		}
		catch(Exception e)
		{
			
		}
		
		Thread.sleep(5000);
		js1.executeScript("window.scrollBy(0,700)");
		Thread.sleep(3000);
		OverduePOM.clickComplianceSubmit.click();			//Clicking on 'Submit' button.
		
		Thread.sleep(1000);
		js1.executeScript("window.scrollBy(0,-2000)");				//Scrolling down window by 2000 px.
		
		Thread.sleep(3000);
		if(type.equalsIgnoreCase("Statutory"))
		{
			Thread.sleep(1000);
			String msg = LiPerformerPOM.readMessage.getText();
			
			if(msg.equalsIgnoreCase("Saved Sucessfully."))
			{

				test.log(LogStatus.PASS, "Message Displayed = "+msg);
			}
			else
			{
				test.log(LogStatus.FAIL, "Message Displayed = "+msg);
			}
		}
			else
			{
				test.log(LogStatus.PASS, "Saved Sucessfully.");
			}
	
			driver.switchTo().parentFrame();
			
			Thread.sleep(1000);
			LiPerformerPOM.clickClose.click();				//Clicking on Close (Cross)
			driver.navigate().refresh();
			MethodPOM.clickMyDashboard.click();
		}
		
		//progress;
	/*	Thread.sleep(4000);
		js1.executeScript("window.scrollBy(0,2000)");
		wait.until(ExpectedConditions.elementToBeClickable(MethodPOM.clickReadExpired));
	    // int total1 = Integer.parseInt(MethodPOM.clickReadExpired.getText());
	     String item1 = MethodPOM.clickReadExpired.getText();	//Reading total items String value
			String[] bits1 = item1.split(" ");								//Splitting the String
			String LicenseExpiredCount1 = bits1[bits1.length - 2];		//Getting the second last word (total number of users)
			
			//int total = Integer.parseInt(MethodPOM.clickReadActive.getText());
			int total1 = Integer.parseInt(LicenseExpiredCount1);
			if(Expiredlicense == total)
		if(total1 < total)
		{
			test.log(LogStatus.PASS, "Count of records in grid decreased.");
			test.log(LogStatus.INFO, "Old Count = "+total+" | New Count = "+total1);
		}
		else
		{
			test.log(LogStatus.FAIL, "Count of records in grid doesn't decreased.");
			test.log(LogStatus.INFO, "Old Count = "+total+" | New Count = "+total1);
		}
		
		Thread.sleep(500);
		wait.until(ExpectedConditions.elementToBeClickable(OverduePOM.clickDashboard));
		OverduePOM.clickDashboard.click();
		
		Thread.sleep(700);
		if(type.equalsIgnoreCase("Internal"))
		{
			wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType));
			LiPerformerPOM.clickType.click();				//Clicking on 'Type' drop down.
			Select drp = new Select(LiPerformerPOM.clickType);
			drp.selectByIndex(1);
			
			progress;
			
			Thread.sleep(500);
			CFOcountPOM.clickApply1.click();				//Clicking on Apply.
		}
		
		Thread.sleep(700);
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickExpired));
		int expired1 = Integer.parseInt(LiPerformerPOM.clickExpired.getText());	//Reading Active count.
		if(expired1 < Expiredlicense)
		{
			test.log(LogStatus.PASS, "Dashboard 'Expired' count decreased.");
			test.log(LogStatus.INFO, "Old Count = "+Expiredlicense+" | New Count = "+expired1);
		}
		else
		{
			test.log(LogStatus.FAIL, "Dashboard 'Expired' count doesn't decreased.");
			test.log(LogStatus.INFO, "Old Count = "+Expiredlicense+" | New Count = "+expired1);
		}*/
	
	}

	
	public static void progress() throws InterruptedException
	{
		WebDriverWait wait = new WebDriverWait(getDriver(), (30));
		try
		{
			Thread.sleep(400);
			wait.until(ExpectedConditions.invisibilityOf(LiPerformerPOM.Progress()));
		}
		catch(Exception e)
		{
			
		}
		
	}
	
	
	public static void LicenseExpiredOnStatutory( ExtentTest test, String type) throws InterruptedException
	   {
		   Thread.sleep(3000);
		   MethodPOM.ClickMaximizeLicenseExpiredOn().click();
		   test.log(LogStatus.PASS, "Expired Maximize Button Working Successfully");
		   Thread.sleep(3000);
		   JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
			js1.executeScript("window.scroll(0,500)");
	        MethodPOM.ClickExportExpiredOn1().click();
	        test.log(LogStatus.PASS, "Dashboard ExpiredOn License List Downloaded Successfully");
			 try
			 {
		   LiPerformerPOM.Showmorecmd().click();
		   test.log(LogStatus.PASS, "ExpiredIn Show More link working Successfully");
		   WebDriverWait wait = new WebDriverWait( getDriver(), 40);
		   wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("showChartDetails"));
		   Thread.sleep(5000);
		   js1.executeScript("window.scroll(0,500)");
		   String NoRecord = MethodPOM.Norecord().getText();
		   if(!NoRecord.equalsIgnoreCase("No items to display")) 
		   {
		   
		   MethodPOM.ClickExportExpiredOn().click();
			test.log(LogStatus.PASS, "Expired License List Downloaded Successfully");
			Thread.sleep(5000);
			/*MethodPOM.Clearfilter().click();
			test.log(LogStatus.PASS, "Clear Filter Button Working  Successfully");
			Thread.sleep(7000);
			*/
			Thread.sleep(7000);
					MethodPOM.ClickOverviewExpiredOn().click();
			
			  test.log(LogStatus.PASS, " License Overview Details Successfully");
			  Thread.sleep(7000);
	           MethodPOM.clickBystatuscloseoverview().click();
				Thread.sleep(2000);
				
				  // Js.executeScript("window.scrollBy(500,0)");
			//	.switchTo().parentFrame();
				// MethodPOM.clickCloseGraphPopup().click();
				// Thread.sleep(7000);
				
				 LiPerformerPOM.EntityLocation().click();
					Thread.sleep(500);
					LiPerformerPOM.EntityLocationExpand().click();
					Thread.sleep(500);
					//LiPerformerPOM.EntityLocationExpand().click();
					//Thread.sleep(500);
				   Thread.sleep(500);
				   LiPerformerPOM.Entitysubexpand().click();
				   Thread.sleep(500);
				   String locationtext1 =LiPerformerPOM.locget().getText();
				   LiPerformerPOM.locget().click();
				   Thread.sleep(3000);
				   LiPerformerPOM.clicklictypet().click();
				   Thread.sleep(500);
				   String LicenseType1 =LiPerformerPOM.Licensetype().getText();
				   Thread.sleep(5000);
				   LiPerformerPOM.Licensetype().click();
				   Thread.sleep(5000);
				  // LiPerformerPOM.Statustext().click();
				  // Thread.sleep(5000);
				  
				    List<String> li=new ArrayList<String>();
				    
				    li.add(locationtext1);
				    li.add(LicenseType1);
				 
				    Thread.sleep(3000);
				    
					List<String> filter=new ArrayList<String>();	
					filter.add("Location");
					filter.add("LicenseType");	
					
					JavascriptExecutor js = (JavascriptExecutor)getDriver() ;
					js.executeScript("window.scrollBy(0,150)");	
					Thread.sleep(3000);

					CFOcountPOM.readTotalItems1().click();					//Clicking on Text of total items just to scroll down.
					String s = CFOcountPOM.readTotalItems1().getText();
					Thread.sleep(2000);

					if(!s.equalsIgnoreCase("No items to display")) 
					{
					Thread.sleep(5000);

					List<WebElement> entitycol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[1]"));
					
					List<WebElement> liccol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[2]"));
					//List<WebElement> Actcol=getDriver().findElements(By.xpath("//*[@id='grid']/div[3]/table/tbody/tr/td[2]"));
					Thread.sleep(2000);

					for(int i=0; i<li.size(); i++){
						
						List<String> text= new ArrayList<String>();
						HashSet<String> pass=new LinkedHashSet<>();
						HashSet<String> fail=new LinkedHashSet<>();
						List<WebElement> raw=new ArrayList<WebElement>();

							if(i==0)
							{
								raw.addAll(entitycol);
							}
						else if(i==1)
							{
								raw.addAll(liccol);
							}
						
							
						for(int k=0;k<raw.size();k++)
							{
								text.add(raw.get(k).getText());
							}

							for(int l=0;l<text.size();l++)
								{
							if(text.get(l).equals(li.get(i)))
								{
									pass.add(text.get(l));	
									System.out.println("pass : "+text.get(l)+" : "+li.get(i));

								}
							else
							{
								fail.add(text.get(l));		
								System.out.println("fail : "+text.get(l)+" : "+li.get(i));
								System.out.println(i);

							}
							 }
					 
				for(String Fal : fail)
					 {
							test.log(LogStatus.FAIL, filter.get(i)+" column shows incorrect value : "+Fal);
					 }	
					 for(String Pas : pass)
					 {
						 test.log(LogStatus.PASS,  filter.get(i)+" dropdown working properly.");
							test.log(LogStatus.PASS, filter.get(i)+" displayed : "+Pas);	
							System.out.println(filter.get(i)+" : "+Pas);
				 }
					 text.clear();
					pass.clear();
					fail.clear();
					raw.clear();
					
					
					}
		   }
		   else
		   {
				test.log(LogStatus.PASS,"Selected Location and License Type No Record Found");
		   }

	Boolean  btnclear =LiPerformerPOM.clearbtn().isEnabled();
	 if(btnclear) 
	 {
		 LiPerformerPOM.clearbtn().click();
		 test.log(LogStatus.PASS,"Clear Button Working Successfully");
	 }
	 else
	 {
		 test.log(LogStatus.FAIL,"Clear Button Not Clickable");
	 }
		   }
			 }
	 catch(Exception e)
	 {
	test.log(LogStatus.PASS, "Expired In More Than 5 Record not displayed");
	 }
	   }
		  
	public static void LicenseExpiringOnStatutoryper( ExtentTest test, String type) throws InterruptedException, IOException
	   {
		   Thread.sleep(3000);
		   LiPerformerPOM.Expiringmaxmize().click();
		   test.log(LogStatus.PASS, "Expiring On Maximize Button Working Successfully");
		   Thread.sleep(3000);
		     String item1 = LiPerformerPOM.NoRecord().getText();	//Reading total items String value
			 if(!item1.equalsIgnoreCase("No Records Found"))
		  {
		   JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
			js1.executeScript("window.scroll(0,500)");
			MethodPOM.DashExpiringOnExport().click();
			test.log(LogStatus.PASS, "Dashboard Expiring License Download Successfully");
			Thread.sleep(7000);
			 try
			 {
				  LiPerformerPOM.Showmorecmd().click();
				   test.log(LogStatus.PASS, "ExpiredIn Show More link working Successfully");
				   WebDriverWait wait = new WebDriverWait( getDriver(), 40);
				   wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("showChartDetails"));
				   Thread.sleep(5000);
				   js1.executeScript("window.scroll(0,500)");
				   String NoRecord = MethodPOM.Norecord().getText();
				   if(!NoRecord.equalsIgnoreCase("No items to display")) 
				   {
				   
				   MethodPOM.ClickExportExpiredOn().click();
					test.log(LogStatus.PASS, "Expired License List Downloaded Successfully");
					Thread.sleep(5000);
					/*MethodPOM.Clearfilter().click();
					test.log(LogStatus.PASS, "Clear Filter Button Working  Successfully");
					Thread.sleep(7000);
					*/
					Thread.sleep(7000);
							MethodPOM.ClickOverviewExpiredOn().click();
					
					  test.log(LogStatus.PASS, " License Overview Details Successfully");
					  Thread.sleep(7000);
			           MethodPOM.clickBystatuscloseoverview().click();
						Thread.sleep(2000);
						
						  // Js.executeScript("window.scrollBy(500,0)");
					//	.switchTo().parentFrame();
						// MethodPOM.clickCloseGraphPopup().click();
						// Thread.sleep(7000);
						
						 LiPerformerPOM.EntityLocation().click();
							Thread.sleep(500);
							LiPerformerPOM.EntityLocationExpand().click();
							Thread.sleep(500);
							//LiPerformerPOM.EntityLocationExpand().click();
							//Thread.sleep(500);
						   Thread.sleep(500);
						   LiPerformerPOM.Entitysubexpand().click();
						   Thread.sleep(500);
						   String locationtext1 =LiPerformerPOM.locget().getText();
						   LiPerformerPOM.locget().click();
						   Thread.sleep(3000);
						   LiPerformerPOM.clicklictypet().click();
						   Thread.sleep(500);
						   String LicenseType1 =LiPerformerPOM.Licensetype().getText();
						   Thread.sleep(5000);
						   LiPerformerPOM.Licensetype().click();
						   Thread.sleep(5000);
						  // LiPerformerPOM.Statustext().click();
						  // Thread.sleep(5000);
						  
						    List<String> li=new ArrayList<String>();
						    
						    li.add(locationtext1);
						    li.add(LicenseType1);
						 
						    Thread.sleep(3000);
						    
							List<String> filter=new ArrayList<String>();	
							filter.add("Location");
							filter.add("LicenseType");	
							
							JavascriptExecutor js = (JavascriptExecutor)getDriver() ;
							js.executeScript("window.scrollBy(0,150)");	
							Thread.sleep(3000);

							CFOcountPOM.readTotalItems1().click();					//Clicking on Text of total items just to scroll down.
							String s = CFOcountPOM.readTotalItems1().getText();
							Thread.sleep(2000);

							if(!s.equalsIgnoreCase("No items to display")) 
							{
							Thread.sleep(5000);

							List<WebElement> entitycol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[1]"));
							
							List<WebElement> liccol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[2]"));
							//List<WebElement> Actcol=getDriver().findElements(By.xpath("//*[@id='grid']/div[3]/table/tbody/tr/td[2]"));
							Thread.sleep(2000);

							for(int i=0; i<li.size(); i++){
								
								List<String> text= new ArrayList<String>();
								HashSet<String> pass=new LinkedHashSet<>();
								HashSet<String> fail=new LinkedHashSet<>();
								List<WebElement> raw=new ArrayList<WebElement>();

									if(i==0)
									{
										raw.addAll(entitycol);
									}
								else if(i==1)
									{
										raw.addAll(liccol);
									}
								
									
								for(int k=0;k<raw.size();k++)
									{
										text.add(raw.get(k).getText());
									}

									for(int l=0;l<text.size();l++)
										{
									if(text.get(l).equals(li.get(i)))
										{
											pass.add(text.get(l));	
											System.out.println("pass : "+text.get(l)+" : "+li.get(i));

										}
									else
									{
										fail.add(text.get(l));		
										System.out.println("fail : "+text.get(l)+" : "+li.get(i));
										System.out.println(i);

									}
									 }
							 
						for(String Fal : fail)
							 {
									test.log(LogStatus.FAIL, filter.get(i)+" column shows incorrect value : "+Fal);
							 }	
							 for(String Pas : pass)
							 {
								 test.log(LogStatus.PASS,  filter.get(i)+" dropdown working properly.");
									test.log(LogStatus.PASS, filter.get(i)+" displayed : "+Pas);	
									System.out.println(filter.get(i)+" : "+Pas);
						 }
							 text.clear();
							pass.clear();
							fail.clear();
							raw.clear();
							
							
							}
				   }
				   else
				   {
						test.log(LogStatus.PASS,"Selected Location and License Type No Record Found");
				   }

			Boolean  btnclear =LiPerformerPOM.clearbtn().isEnabled();
			 if(btnclear) 
			 {
				 LiPerformerPOM.clearbtn().click();
				 test.log(LogStatus.PASS,"Clear Button Working Successfully");
			 }
			 else
			 {
				 test.log(LogStatus.FAIL,"Clear Button Not Clickable");
			 }
				   }
					 }
			 catch(Exception e)
			 {
			test.log(LogStatus.PASS, "Expired In More Than 5 Record not displayed");
			 }
		  }}
	public static void LicenseExpiringOnInternalper( ExtentTest test, String type) throws InterruptedException, IOException
	   {
		  WebDriverWait wait = new WebDriverWait( getDriver(), (30));
			/*wait1.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType));
			LiPerformerPOM.clickType.click();				//Clicking on 'Type' drop down.
			
			
			Select drp = new Select(LiPerformerPOM.clickType);
			drp.selectByIndex(1);
			CFOcountPOM.clickApply1.click();	
		   Thread.sleep(3000);
		   */
		   LiPerformerPOM.Expiringmaxmize().click();
		   test.log(LogStatus.PASS, "Expiring On Maximize Button Working Successfully");
		   Thread.sleep(3000);
		   JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
			js1.executeScript("window.scroll(0,500)");
			MethodPOM.DashExpiringOnExport().click();
			  Thread.sleep(3000);
			test.log(LogStatus.PASS, "Dashboard Expiring License Download Successfully");
			  /*licmgmtPOM.showmoremgmt().click();
			   Thread.sleep(7000);
				WebDriverWait wait1 = new WebDriverWait( getDriver(), (30));	
			   wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("showLicenseDetails"));
			 
			   Thread.sleep(3000);
			   
			  MethodPOM.ClickExportExpiredOn().click();
				
			   int flag = 0;
				try
				{
					wait.until(ExpectedConditions.visibilityOf(MethodPOM.checkTable1()));	//Waiting until records table gets visible.
					flag = 1;
				}
				catch(Exception e)
				{
					
				}
				
				if(flag == 1)
				{
					js1.executeScript("window.scrollBy(0,1000)");				//Scrolling down window by 2000 px.
					
					Thread.sleep(700);
					String item = MethodPOM.clickReadActive().getText();
					String[] bits = item.split(" ");								//Splitting the String
					String LicenseCount = bits[bits.length - 2];				//Getting the second last word (total number of users)
					int count = 0;
					if(LicenseCount.equalsIgnoreCase("to"))
					{
						Thread.sleep(2500);
						item = MethodPOM.clickReadActive().getText();
						bits = item.split(" ");										//Splitting the String
						LicenseCount = bits[bits.length - 2];					//Getting the second last word (total number of users)
					}
					count = Integer.parseInt(LicenseCount);
					
					File dir = new File("C:\\Users\\deepalid\\Downloads");
					File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
					
					js1.executeScript("window.scrollBy(0,-2000)");				//Scrolling down window by 2000 px.
					Thread.sleep(500);
					MethodPOM.ClickExportExpiredOn().click();						//Clicking on Excel Image.
					
					Thread.sleep(3000);
					File dir1 = new File("C:\\Users\\deepalid\\Downloads");
					File[] allFilesNew = dir1.listFiles();							//Counting number of files in directory after download
					
					File lastModifiedFile = allFilesNew[0];			//Storing any 0th index file in 'lastModifiedFile' file name.
				    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
				    {
				       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified()) 	//If allFilesNew[i] file is having large/latest time time of update then latest modified file be allFilesNew[i] file.
				       {
				           lastModifiedFile = allFilesNew[i];
				       }
				    }
					
					if(dirContents.length < allFilesNew.length)
					{
						test.log(LogStatus.PASS, type+" :- File downloaded successfully.");
						/*
						fis = new FileInputStream(lastModifiedFile);
						workbook = new XSSFWorkbook(fis);
						sheet = workbook.getSheetAt(0);					//Retrieving first sheet of Workbook
						int no = sheet.getLastRowNum();
						int SheetRecords = no - 0;						//Sheet have extra 5 lines of information at top (But row count started from 0, so -4)
						fis.close();
						
						if(count == SheetRecords)
						{
							//test.log(LogStatus.PASS, "Count of records displayed from grid matches to number records in Excel Sheet.");
							test.log(LogStatus.PASS, "Total records from grid = "+count+" | Total records in Excel Sheet = "+SheetRecords);
						}
						else
						{
							//test.log(LogStatus.FAIL, "Count of records displayed from grid doesn't matches to number records in Excel Sheet.");
							test.log(LogStatus.FAIL, "Total records from grid = "+count+" | Total records in Excel Sheet = "+SheetRecords);
						}
					}
					else
					{
						test.log(LogStatus.FAIL, type+" :- File doesn't downloaded successfully.");
					}
				}
				else
				{
					test.log(LogStatus.PASS, type+" :- Records not displayed (available). Excel sheet didn't downloaded");
				}
			/*	LiPerformerPOM.EntityLocation().click();
     			Thread.sleep(500);
					LiPerformerPOM.EntityLocationExpand().click();
					Thread.sleep(500);
				//   LiPerformerPOM.aa1().click();
					Thread.sleep(500);
					LiPerformerPOM.demolocation().click();;
				   Thread.sleep(500);
			   String locationtext1 =LiPerformerPOM.locget().getText();
			   LiPerformerPOM.locget().click();
			   Thread.sleep(3000);
			   LiPerformerPOM.clicklictypet().click();
			   Thread.sleep(500);
			   String LicenseType1 =LiPerformerPOM.Licensetypeinternal().getText();
			   Thread.sleep(5000);
			    LiPerformerPOM.Licensetypeinternal().click();
			    List<String> li=new ArrayList<String>();
			    
			    li.add(locationtext1);
			    li.add(LicenseType1);
			 
			    Thread.sleep(3000);
			    
				List<String> filter=new ArrayList<String>();	
				filter.add("Location");
				filter.add("LicenseType");	
				
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("window.scrollBy(0,150)");	
				Thread.sleep(3000);

				CFOcountPOM.readTotalItems1().click();					//Clicking on Text of total items just to scroll down.
				String s = CFOcountPOM.readTotalItems1().getText();
				Thread.sleep(2000);

				if(!s.equalsIgnoreCase("No items to display")) 
				{
				Thread.sleep(5000);

				List<WebElement> entitycol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[1]"));
				
				List<WebElement> liccol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[2]"));
				//List<WebElement> Actcol=driver.findElements(By.xpath("//*[@id='grid']/div[3]/table/tbody/tr/td[2]"));
				Thread.sleep(2000);

				for(int i=0; i<li.size(); i++){
					
					List<String> text= new ArrayList<String>();
					HashSet<String> pass=new LinkedHashSet<>();
					HashSet<String> fail=new LinkedHashSet<>();
					List<WebElement> raw=new ArrayList<WebElement>();

						if(i==0)
						{
							raw.addAll(entitycol);
						}
					else if(i==1)
						{
							raw.addAll(liccol);
						}
					
						
					for(int k=0;k<raw.size();k++)
						{
							text.add(raw.get(k).getText());
						}

						for(int l=0;l<text.size();l++)
							{
						if(text.get(l).equals(li.get(i)))
							{
								pass.add(text.get(l));	
								System.out.println("pass : "+text.get(l)+" : "+li.get(i));

							}
						else
						{
							fail.add(text.get(l));		
							System.out.println("fail : "+text.get(l)+" : "+li.get(i));
							System.out.println(i);

						}
						 }
				 
			for(String Fal : fail)
				 {
						test.log(LogStatus.FAIL, filter.get(i)+" column shows incorrect value : "+Fal);
				 }	
				 for(String Pas : pass)
				 {
					 test.log(LogStatus.PASS,  filter.get(i)+" dropdown working properly.");
						test.log(LogStatus.PASS, filter.get(i)+" displayed : "+Pas);	
						System.out.println(filter.get(i)+" : "+Pas);
			 }
				 text.clear();
				pass.clear();
				fail.clear();
				raw.clear();

				}
				

				   }
				   else
				   {
						test.log(LogStatus.PASS,"Selected Location and License Type No Record Found");
				   }
			
			Boolean  btnclear =LiPerformerPOM.clearbtn().isEnabled();
		     if(btnclear) 
		     {
		    	 LiPerformerPOM.clearbtn().click();
		    	 test.log(LogStatus.PASS,"Clear Button Working Successfully");
		     }
		     else
		     {
		    	 test.log(LogStatus.FAIL,"Clear Button Not Clickable");
		     }
			
*/
	   }
	public static void Documents( ExtentTest test, String type) throws InterruptedException
	{
		WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		progress();
		
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickExpired()));
		
		LiPerformerPOM.clickMyDocuments().click();		//Clicking on 'My Documents'
		Thread.sleep(3000);
		LiPerformerPOM.clickMyDocumentsMenu().click();	//Clicking on 'My Documents'
		
		progress();
		
		wait.until(ExpectedConditions.visibilityOf(LiReviewerPOM.checkTable1()));	//Waiting until records table gets visible.
		
		if(type.equalsIgnoreCase("Internal"))
		{
			LiPerformerPOM.clickType2().click();			//Clicking on 'Type' drop down.
			Thread.sleep(5000);
			LiPerformerPOM.selectInternal().click();//Selecting 'Internal' option.
			Thread.sleep(1000);
			progress();
		}
		
		Thread.sleep(500);
		elementsList = LiPerformerPOM.clickDownload1();

		File dir = new File("C:\\Users\\deepalid\\Downloads");
		File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
		
		Thread.sleep(5000);
		elementsList.get(1).click();//Clicking on first 'Download' link.
		Thread.sleep(3000);
        
		elementsList= LiPerformerPOM.clickviewLiceDocument();
		elementsList.get(1).click(); 
		Thread.sleep(7000);
		//driver.switchTo().frame("Freamshow");
  //wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("Freamshow"));
		
		By locator = By.xpath("//*[@id='divOverView']/div/div/div[1]/button");

		wait.until(ExpectedConditions.presenceOfElementLocated(locator));
		Thread.sleep(4000);
		WebElement ViewButton = getDriver().findElement(locator);	
		Thread.sleep(3000);
	
	JavascriptExecutor jse=(JavascriptExecutor)getDriver();
	jse.executeScript("arguments[0].click();", ViewButton);
		Thread.sleep(4000);
		test.log(LogStatus.PASS, "File Viewed successfully.");
	//	LiPerformerPOM.Clickviewclose.click();
		
		
		Thread.sleep(3000);
		File dir1 = new File("C:\\Users\\deepalid\\Downloads");
		File[] dirContents1 = dir1.listFiles();							//Counting number of files in directory after download
		
		if(dirContents.length < dirContents1.length)
		{
			test.log(LogStatus.PASS, "File downloaded successfully.");
		}
		else
		{
			test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
		}
		
		
		/*Thread.sleep(3000);
		if(type.equalsIgnoreCase("Internal"))
		{
			LiPerformerPOM.Clicklictypedropdown().click();
			Thread.sleep(3000);
			LiPerformerPOM.searchlic1in().click();
		}else
		{
			LiPerformerPOM.Clicklictypedropdown().click();
			Thread.sleep(3000);
		    LiPerformerPOM.searchlic1().click();
		}
		
		
	    Thread.sleep(3000);
	    test.log(LogStatus.PASS, "selected License Type Cleared");
		//LiPerformerPOM.selectlic.click();
		LiPerformerPOM.clearbtn().click();
		*/
		Thread.sleep(3000);
	//	wait.until(ExpectedConditions.elementToBeClickable(OverduePOM.clickDashboard));
		//wait.until(ExpectedConditions.elementToBeClickable(OverduePOM.clickDashboard));
		LiPerformerPOM.Multicheckdoc1().click();
		Thread.sleep(3000);
		LiPerformerPOM.Multicheckdoc2().click();
		
		
		File dir2 = new File("C:\\Users\\deepalid\\Downloads");
		File[] dirContents2 = dir2.listFiles();						//Counting number of files in directory before download
		
		Thread.sleep(500);
		LiPerformerPOM.MultiDownload().click();		//Exporting (Downloading) file
		
		Thread.sleep(3000);
		File dir3 = new File("C:\\Users\\deepalid\\Downloads");
		File[] allFilesNew = dir3.listFiles();						//Counting number of files in directory after download
		
		Thread.sleep(500);
       if(dirContents2.length < allFilesNew.length)
		{
			test.log(LogStatus.PASS, " Multipal  File downloaded successfully.");	
		}	else
		{
			test.log(LogStatus.FAIL, " File does not downloaded.");
		}
		Thread.sleep(3000);
		
     /*	LiPerformerPOM.Sharebutton.click();
     	Thread.sleep(3000);
     	 wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("OverViews1"));
    	LiPerformerPOM.Sharesave.click();
    	Thread.sleep(1000);
    	String msg = LiPerformerPOM.Sharevaliedmsg.getText();
		
		if(msg.equalsIgnoreCase("Please Enter Email."))
		{

			test.log(LogStatus.PASS, "Validation Message displayed = "+msg);
		}
		else
		{
			test.log(LogStatus.FAIL, "Message Displayed = "+msg);
		}
		
     	
     	Thread.sleep(1000);
     	LiPerformerPOM.shareemail.sendKeys("deepali@tlregtech.in");
     	Thread.sleep(3000);
     	LiPerformerPOM.ShareContactNo.sendKeys("86262040232");
     	Thread.sleep(3000);
     	LiPerformerPOM.Sharesave.click();
     	test.log(LogStatus.PASS, "Document shared Successfully.");
     	Thread.sleep(3000);
     	LiPerformerPOM.clickUnshare.click();
     	 // Switching to Alert       
        Alert alert = driver.switchTo().alert();
       
        // Capturing alert message.   
        String alertMessage= driver.switchTo().alert().getText();
       
        Thread.sleep(3000);
    //    test.log(LogStatus.PASS, alertMessage);
       
        // Displaying alert message
        System.out.println(alertMessage);
       
        // Accepting alert
        alert.accept();
        test.log(LogStatus.PASS,"Document unshared Successfully." );
        Thread.sleep(1000);
        LiPerformerPOM.ShareClose.click();
        test.log(LogStatus.PASS,"Share Popup Close Button Working Successfully" );
        Thread.sleep(3000);
    	//LiPerformerPOM.clearbtn.click();
        driver.switchTo().parentFrame();
        */
		String PerformerColumn = LiPerformerPOM.PerformerColumn().getText();
		   if(PerformerColumn.equalsIgnoreCase("Performer")) 
		   {
			   
				test.log(LogStatus.PASS, "In Grid Performer Column Displayed.");
		   }
		   else
		   {
			   test.log(LogStatus.FAIL,"In Grid Performer Column Not Displayed.");
		   }
		   Thread.sleep(3000);
		 String Reviewercolumn = LiPerformerPOM.ReviewerColumn().getText();
		   if(Reviewercolumn.equalsIgnoreCase("Reviewer")) 
		   {
			   
				test.log(LogStatus.PASS, "In Grid Reviewer Column Displayed.");
		   }
		   else
		   {
			   test.log(LogStatus.FAIL,"In Grid Reviewer Column Not Displayed.");
		   }
        Thread.sleep(3000);
        
        MethodPOM.clickMyDashboard().click();
	}
	
	public static void Reports( ExtentTest test, String type) throws InterruptedException, IOException
	{
		WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickExpired()));
		
		LiPerformerPOM.clickMyReport().click();		//Clicking on 'My Reports'
		Thread.sleep(5000);
		progress();
	 	wait.until(ExpectedConditions.visibilityOf(LiReviewerPOM.checkTable1()));	//Waiting until records table gets visible.
			   Thread.sleep(3000);
	     
		/* String Entity =LiPerformerPOM.Entitycolumn().getText();
		   if(LiPerformerPOM.Entitycolumn().isDisplayed())
		   {
			   
				test.log(LogStatus.PASS, "In grid Entity column displayed.");
		   }
		   else
		   {
			   test.log(LogStatus.FAIL,"In Grid Entity Column Not Displayed");
		   }
		   Thread.sleep(3000);
		   
		   String Entityname =LiPerformerPOM.Entityname().getText();
		   if(LiPerformerPOM.Entityname().isDisplayed())
		   {
			   
				test.log(LogStatus.PASS, "In Entity Column Entity Name Displayed.");
		   }
		   else
		   {
			   test.log(LogStatus.FAIL,"In Entity Column Entity Name Not Displayed.");
		   }
		   Thread.sleep(5000);

		  */
		// String Noitemdisplay = LiPerformerPOM.Noitemdisplay.getText();
		 //  if(!Noitemdisplay.equalsIgnoreCase("No items to display")) 
		{
			   
		if(type.equalsIgnoreCase("Internal"))
		{
			LiPerformerPOM.clickType22().click();			//Clicking on 'Type' drop down.
			Thread.sleep(500);
			LiPerformerPOM.selectInternal().click();//Selecting 'Internal' option.
			Thread.sleep(1000);
			LiPerformerPOM.Reportapply().click();
			progress();
			Thread.sleep(5000);
			//driver.findElement(By.xpath("(//*[@class='k-button k-button-icontext ob-edit k-grid-edit'])[1]")).click();
			//Thread.sleep(5000);
			//test.log(LogStatus.PASS," License Overview  Button Working Successfully");

		}
		  
		//	driver.findElement(By.xpath("(//*[@class='k-button k-button-icontext ob-edit k-grid-edit'])[1]")).click();
			//test.log(LogStatus.PASS," License Overview  Button Working Successfully");
		   //   Thread.sleep(3000);
		   //  driver.findElement(By.xpath("//*[@id='divShowReminderDialog']/div/div/div[1]/button")).click();
		   
 
		
	/*	LiReviewerPOM.Addcolumn().click();
		Thread.sleep(3000);
	     LiReviewerPOM.clickColumn().click();
	     Thread.sleep(300);
	     LiReviewerPOM.addnomineecol().click();
	     Thread.sleep(300);
	     String Nominee =LiReviewerPOM.Nomineecolumn().getText();
		   if(LiReviewerPOM.Nomineecolumn().isDisplayed())
		   {
			   
				test.log(LogStatus.PASS, "In grid Nominee column displayed.");
		   }
		   else
		   {
			   test.log(LogStatus.FAIL,"In Grid Nominee Column Not Displayed");
		   }
*/
 getDriver().findElement(By.xpath("//*[@id='exportReport']")).click();
		
		test.log(LogStatus.PASS," License Report  Downloaded Successfully.");
		
		Thread.sleep(7000);
		 getDriver().findElement(By.xpath("(//*[@class='k-button k-button-icontext ob-edit k-grid-edit'])[1]")).click();
	
		test.log(LogStatus.PASS," License Overview  Button Working Successfully");
	      Thread.sleep(3000);
getDriver().findElement(By.xpath("//*[@id='divShowReminderDialog']/div/div/div[1]/button")).click();
		
		CheckReports( test, 1 , "Active");
		 Thread.sleep(1000);
		CheckReports(test, 2, "Expired");
		 Thread.sleep(1000);
		CheckReports( test, 3, "Expiring");
		 Thread.sleep(1000);
		CheckReports( test, 4, "Applied");
		 Thread.sleep(1000);
		CheckReports( test, 5, "Applied but Pending for Renewal");
		 Thread.sleep(1000);
		CheckReports( test, 6, "Renewed");
		 Thread.sleep(1000);
		CheckReports( test, 7, "Rejected");
		 Thread.sleep(1000);
		CheckReports( test, 8, "Registered");
		 Thread.sleep(1000);
		CheckReports( test, 9, "Registered & Renewal Filed");
		 Thread.sleep(1000);
		CheckReports(test, 10, "Validity Expired");
		 Thread.sleep(1000);
		CheckReports( test, 11, "Terminate");
		
		Thread.sleep(500);
		
		LiPerformerPOM.clickMyReport().click();		//Clicking on 'My Reports'
	Thread.sleep(7000);
		}
		 LiPerformerPOM.EntityLocation().click();
			
			Thread.sleep(500);
			   MethodPOM.entitysearch();
			 Thread.sleep(500);
		   MethodPOM.entitysearch().sendKeys("Branch Mumbai");
		 			Thread.sleep(500);
		 		 Thread.sleep(3000);
			   String locationtext1 =LiPerformerPOM.locgetInternal().getText();
			   Thread.sleep(3000);
			   System.out.println(locationtext1);
				LiPerformerPOM.SelectInternalLocation().click();;
			  
			//   LiPerformerPOM.locget().click();
				LiPerformerPOM.EntityLocation().click();
			   Thread.sleep(3000);
	   LiPerformerPOM.clicklictypet().click();
	   Thread.sleep(500);
	   LiPerformerPOM.internalsearclic().sendKeys("Annual Maintance");
	   String LicenseType1 =LiPerformerPOM.inlic().getText();
	   Thread.sleep(5000);
	  LiPerformerPOM.inlic().click();
	  Thread.sleep(500);
   LiPerformerPOM.reportapplybtn().click();
   Thread.sleep(5000);

    List<String> li=new ArrayList<String>();
    
    li.add(locationtext1);
    li.add(LicenseType1);
 
    Thread.sleep(3000);
    
	List<String> filter=new ArrayList<String>();	
	filter.add("Location");
	filter.add("LicenseType");	
	
	JavascriptExecutor js = (JavascriptExecutor) getDriver();
	js.executeScript("window.scrollBy(0,150)");	
	Thread.sleep(3000);

	CFOcountPOM.readTotalItems1().click();					//Clicking on Text of total items just to scroll down.
	String s = CFOcountPOM.readTotalItems1().getText();
	Thread.sleep(2000);

	if(!s.equalsIgnoreCase("No items to display")) 
	{
	Thread.sleep(5000);

	List<WebElement> entitycol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[2]"));
	
	List<WebElement> liccol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[3]"));
	//List<WebElement> Actcol=driver.findElements(By.xpath("//*[@id='grid']/div[3]/table/tbody/tr/td[2]"));
	Thread.sleep(2000);

	for(int i=0; i<li.size(); i++){
		
		List<String> text= new ArrayList<String>();
		HashSet<String> pass=new LinkedHashSet<>();
		HashSet<String> fail=new LinkedHashSet<>();
		List<WebElement> raw=new ArrayList<WebElement>();

			if(i==0)
			{
				raw.addAll(entitycol);
			}
		else if(i==1)
			{
				raw.addAll(liccol);
			}
		
			
		for(int k=0;k<raw.size();k++)
			{
				text.add(raw.get(k).getText());
			}

			for(int l=0;l<text.size();l++)
				{
			if(text.get(l).equals(li.get(i)))
				{
					pass.add(text.get(l));	
					System.out.println("pass : "+text.get(l)+" : "+li.get(i));

				}
			else
			{
				fail.add(text.get(l));		
				System.out.println("fail : "+text.get(l)+" : "+li.get(i));
				System.out.println(i);

			}
			 }
	 
for(String Fal : fail)
	 {
			test.log(LogStatus.FAIL, filter.get(i)+" column shows incorrect value : "+Fal);
	 }	
	 for(String Pas : pass)
	 {
		 test.log(LogStatus.PASS,  filter.get(i)+" dropdown working properly.");
			test.log(LogStatus.PASS, filter.get(i)+" displayed : "+Pas);	
			System.out.println(filter.get(i)+" : "+Pas);
 }
	 text.clear();
	pass.clear();
	fail.clear();
	raw.clear();
	
	
	}
		   }
	else
	{
		test.log(LogStatus.PASS,"Selected Location and License Type No Record Found");
	}

	Boolean  btnclear =LiPerformerPOM.clearbtn().isEnabled();
	if(btnclear) 
	{
	LiPerformerPOM.clearbtn().click();
	test.log(LogStatus.PASS,"Clear Button Working Successfully");
	}
	else
	{
	test.log(LogStatus.FAIL,"Clear Button Not Clickable");
	}

		   }
	
	
	//  wait.until(ExpectedConditions.elementToBeClickable(MethodPOM.clickMyDashboard));
		
	//OverduePOM.clickDashboard.click();

	

	
	public static void CheckReports( ExtentTest test, int status, String type) throws InterruptedException, IOException
	{		
		
		
		WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("window.scrollBy(0,-1000)");
		
		LiPerformerPOM.clickStatus1().click();			//Clicking on 'Status' drop down.
		Thread.sleep(5000);
		//elementsList = LiPerformerPOM.selectStatus1();	//Selecting Status.
		//Thread.sleep(3000);
		//elementsList.get(status).click();
		List<WebElement>roc = getDriver().findElements(By.xpath("(//*[@class='k-item'])"));
		selectOptionFromDropDown_bs(roc, type);
		
		LiPerformerPOM.reportapplybtn().click();
		
		Thread.sleep(3000);
		
		Thread.sleep(1000);
		progress();
		
		int flag = 0;
		try
		{
			wait.until(ExpectedConditions.visibilityOf(LiReviewerPOM.checkTable1()));	//Waiting until records table gets visible.
			flag = 1;
		}
		catch(Exception e)
		{
			
		}
		
		if(flag == 1)
		{
			js.executeScript("window.scrollBy(0,2000)");				//Scrolling down window by 2000 px.
			
			  Thread.sleep(10000);
				CFOcountPOM.readTotalItems1().click();
				
				String item1 = CFOcountPOM.readTotalItems1().getText();
				//String NoRecord = LiReviewerPOM.reNorecord.getText();
				 if(!item1.equalsIgnoreCase("No items to display")) 
				 {
				String[] bits1 = item1.split(" ");								//Splitting the String
				String compliancesCount1 = bits1[bits1.length - 2];				//Getting the second last word (total number of users)
				int count2 = Integer.parseInt(compliancesCount1);
				String NoRecord = LiReviewerPOM.reNorecord().getText();
				   if(!NoRecord.equalsIgnoreCase("No items to display")) 
				 {
					   try
						{
							performerPOM.clickExcelReport().sendKeys(Keys.PAGE_DOWN);
						}
						catch(Exception e)
						{
							
						}
						js.executeScript("window.scrollBy(0,1000)");
						
					
						Thread.sleep(100);
						File dir = new File("C://Users//deepalid//Downloads");
						File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
						
						Thread.sleep(500);
						CFOcountPOM.clickNextPage1().sendKeys(Keys.PAGE_UP);
						Thread.sleep(250);
						performerPOM.clickExcelReport().click();					//Clicking on 'Excel Report' image.
						
						
						Thread.sleep(500);
						File dir1 = new File("C://Users//deepalid//Downloads");
						File[] allFilesNew = dir1.listFiles();							//Counting number of files in directory after download
						
						if(dirContents.length < allFilesNew.length)
						{
							test.log(LogStatus.PASS, "File downloaded successfully.");
							
							File lastModifiedFile = allFilesNew[1];			//Storing any 0th index file in 'lastModifiedFile' file name.
						    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
						    {
						       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified()) 	//If allFilesNew[i] file is having large/latest time time of update then latest modified file be allFilesNew[i] file.
						       {
						           lastModifiedFile = allFilesNew[i];
						       }
						    }
							
							Thread.sleep(100);
							fis = new FileInputStream(lastModifiedFile);
							workbook = new XSSFWorkbook(fis);
							sheet = workbook.getSheetAt(0);					//Retrieving first sheet of Workbook
							
							int no = sheet.getLastRowNum();
							Row row = sheet.getRow(no);
							Cell c1 = row.getCell(0);
							int records =(int) c1.getNumericCellValue();
							fis.close();
							
							if(count2 == records)
							{
								//test.log(LogStatus.PASS, "Notice=No of records from grid matches to no of records in Excel Sheet.");
								test.log(LogStatus.PASS, "For "+type+" status total records from Grid = "+count2+" | Total records from Report = "+records);
							}
							else
							{
								//test.log(LogStatus.FAIL, "Notice=No of records from grid doesn't matches to no of records in Excel Sheet.");
								test.log(LogStatus.FAIL, "For "+type+" status total records from Grid = "+count2+" | Total records from Excel Sheet = "+records);
							}
						}
						else
						{
							test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
						}
				 }
						else
						{
							  test.log(LogStatus.PASS, "Expired On Popup No Record Found ");
						}
				 }
		}
		
		}
			/*Thread.sleep(700);
			String item = LiPerformerPOM.readTotalRecords1.getText();
			String[] bits = item.split(" ");								//Splitting the String
			String compliancesCount = bits[bits.length - 2];				//Getting the second last word (total number of users)
			int count = 0;
			if(compliancesCount.equalsIgnoreCase("to"))
			{
				Thread.sleep(2500);
				item = CFOcountPOM.readTotalItems1.getText();
				bits = item.split(" ");										//Splitting the String
				compliancesCount = bits[bits.length - 2];					//Getting the second last word (total number of users)
			}
			count = Integer.parseInt(compliancesCount);
			
			File dir = new File("C://Users//dipali//Downloads");
			File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
			
			js.executeScript("window.scrollBy(0,-2000)");				//Scrolling down window by 2000 px.
			Thread.sleep(500);
			LiPerformerPOM.clickExcel.click();						//Clicking on Excel Image.
			
			Thread.sleep(5000);
			File dir1 = new File("C://Users//dipali//Downloads");
			File[] allFilesNew = dir1.listFiles();	
			if(dirContents.length < allFilesNew.length)
			{
				test.log(LogStatus.PASS, "File downloaded successfully.");
				
				File lastModifiedFile = allFilesNew[0];			//Storing any 0th index file in 'lastModifiedFile' file name.
			    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
			    {
			       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified());	//If allFilesNew[i] file is having large/latest time time of update then latest
                                                                                             //Counting number of files in directory after download
			
			       Thread.sleep(100);
					fis = new FileInputStream(lastModifiedFile);
					workbook = new XSSFWorkbook(fis);
					sheet = workbook.getSheetAt(0);		
				
					int no = sheet.getLastRowNum();
					Row row = sheet.getRow(no);
					Cell c1 = row.getCell(0);
					int records =(int) c1.getNumericCellValue();
					
					fis.close();
					
					if(count == records)
					{
						//test.log(LogStatus.PASS, "Count of records displayed from grid matches to number records in Excel Sheet.");
						test.log(LogStatus.PASS, "Total records from grid = "+count+" | Total records in Excel Sheet = "+records);
					}
					else
					{
						//test.log(LogStatus.FAIL, "Notice=No of records from grid doesn't matches to no of records in Excel Sheet.");
						test.log(LogStatus.FAIL, "Total records from grid = "+count+" | Total records in Excel Sheet = "+records);
					}
			    }
			}
				
				else
				{
					test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
				}
			}
			
/*		File lastModifiedFile = allFilesNew[1];			//Storing any 0th index file in 'lastModifiedFile' file name.
		    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
		    {
		       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified()) 	//If allFilesNew[i] file is having large/latest time time of update then latest modified file be allFilesNew[i] file.
		       {
		           lastModifiedFile = allFilesNew[i];
		       }
		    }
			
			if(dirContents.length < allFilesNew.length)
			{
				test.log(LogStatus.PASS, type+" :- File Downloaded Successfully.");
				
			fis = new FileInputStream(lastModifiedFile);
				workbook = new XSSFWorkbook(fis);
				sheet = workbook.getSheetAt(0);					//Retrieving first sheet of Workbook
				int no = sheet.getLastRowNum();
				int SheetRecords = no - 0;						//Sheet have extra 5 lines of information at top (But row count started from 0, so -4)
				fis.close();
				
				if(count == SheetRecords)
				{
					test.log(LogStatus.PASS, "Count of records displayed from grid matches to number records in Excel Sheet.");
					test.log(LogStatus.INFO, "Total records from grid = "+count+" | Total records in Excel Sheet = "+SheetRecords);
				}
				else
				{
					test.log(LogStatus.FAIL, "Count of records displayed from grid doesn't matches to number records in Excel Sheet.");
					test.log(LogStatus.INFO, "Total records from grid = "+count+" | Total records in Excel Sheet = "+SheetRecords);
				}
			}
			else
			{
				test.log(LogStatus.FAIL, type+" :- File doesn't Downloaded Successfully.");
			}
		}
		else
		{
			test.log(LogStatus.SKIP, type+" :- Records not displayed (available). Excel sheet didn't downloaded");
		}
		*/
	
	
	public static void PendingReview( ExtentTest test, String type) throws InterruptedException
	{
		WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		Actions action = new Actions(getDriver());
		
		progress();
		
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickExpired()));
		int pending = Integer.parseInt(LiPerformerPOM.clickPendingForReview().getText());
		System.out.println("Pending = "+pending);
		
		LiPerformerPOM.clickPendingForReview().click();
		
		Thread.sleep(500);
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.checkTable()));
		
		action.keyDown(Keys.CONTROL).sendKeys(Keys.PAGE_DOWN).perform();
		action.keyUp(Keys.CONTROL).perform();
		
		int total = Integer.parseInt(LiPerformerPOM.readTotalRecords().getText());
		
		if(pending == total)
		{
			test.log(LogStatus.PASS, "Dashboard 'Pending For Review' count matches to Total no of Records. Dashboard count = "+pending+", Total Records count = "+total);
		}
		else
		{
			test.log(LogStatus.FAIL, "Dashboard 'Pending For Review' count doesn't matches to Total no of Records. Dashboard count = "+pending+", Total Records count = "+total);
		}
		
		Thread.sleep(500);
		wait.until(ExpectedConditions.elementToBeClickable(OverduePOM.clickDashboard()));
		OverduePOM.clickDashboard().click();
		
		Thread.sleep(700);
		if(type.equalsIgnoreCase("Internal"))
		{
			wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
			LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
			Select drp = new Select(LiPerformerPOM.clickType());
			drp.selectByIndex(1);
			
			progress();
			
			Thread.sleep(500);
			CFOcountPOM.clickApply1().click();				//Clicking on Apply.
		}
	}

	public static void LicenseExpiringOnStatutoryper1( ExtentTest test, String type) throws InterruptedException 
	{
		WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpiring()));
		String Expiring=MethodPOM.clickExpiring().getText();
		
	     int Expiringlicense = Integer.parseInt(Expiring);	//Reading Active count.

	      MethodPOM.clickExpiring().click();					//Clicking on 'Expiring' image
	      Thread.sleep(4000);
	        JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
			js1.executeScript("window.scroll(0,500)");
			Thread.sleep(4000);
			
			MethodPOM.clickReadExpiring().click();					//Clicking on total items count
			Thread.sleep(500);
			String item = MethodPOM.clickReadExpiring().getText();	//Reading total items String value
			String[] bits = item.split(" ");								//Splitting the String
			String LicenseExpiringCount = bits[bits.length - 2];		//Getting the second last word (total number of users)
			
			//int total = Integer.parseInt(MethodPOM.clickReadActive.getText());
			int total = Integer.parseInt(LicenseExpiringCount);
			if(Expiringlicense == total)
				{
					//test.log(LogStatus.PASS, "Number of Expiring License  grid matches to Dashboard Expiring  License   Count.");
					test.log(LogStatus.PASS, "No of Expiring  License  in the grid = "+total+" | Dashboard Expiring License  Count = "+Expiringlicense);
				}
				else
				{
					//test.log(LogStatus.FAIL, "Number of Expiring License does not matches to Dashboard Expiring License   Count.");
					test.log(LogStatus.FAIL, "No of Expiring License  in the grid = "+total+" | Dashboard Expiring License  Count = "+Expiringlicense);
				}
				Thread.sleep(3000);
				//js1.executeScript("window.scrollBy(2000,0)");     //Scrolling UP window by 2000 px.
				//Thread.sleep(3000);
				
				MethodPOM.ClickActiveOverview().click();
				test.log(LogStatus.PASS, "Expiring License Overview Details Successfully");
				Thread.sleep(3000);
				//MethodPOM.ClickCloseOverview.click();
				
				//MethodPOM.clickMyDashboard.click();

		
	}

	public static void RejectedCount( ExtentTest test, String type) throws InterruptedException, IOException 
	{
		WebDriverWait wait = new WebDriverWait( getDriver(), (30));
			
			wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickRejected()));
			String Rejected=MethodPOM.clickRejected().getText();
			
		     int RejectedLicense = Integer.parseInt(Rejected);	//Reading Rejected count.

		      MethodPOM.clickRejected().click();					//Clicking on 'Rejected ' image
		      Thread.sleep(4000);
		        JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
				js1.executeScript("window.scroll(0,500)");
				Thread.sleep(4000);
				
				MethodPOM.clickReadRejected().click();					//Clicking on total items count
				String item1 = MethodPOM.clickReadExpired().getText();	//Reading total items String value
				  if(!item1.equalsIgnoreCase("No items to display"))
				  {
				Thread.sleep(5000);
				String item = MethodPOM.clickReadRejected().getText();	//Reading total items String value
		
				String[] bits = item.split(" ");								//Splitting the String
				String LicensRejected = bits[bits.length - 2];		//Getting the second last word (total number of users)
				
				//int total = Integer.parseInt(MethodPOM.clickReadActive.getText());
				int total = Integer.parseInt(LicensRejected);
				if(RejectedLicense == total)
					{
						//test.log(LogStatus.PASS, "Number of Rejected License  grid matches to Dashboard Rejected  License   Count.");
						test.log(LogStatus.PASS, "No of Rejected  License  in the grid = "+total+" | Dashboard Rejected License  Count = "+RejectedLicense);
					}
					else
					{
						//test.log(LogStatus.FAIL, "Number of Rejected License does not matches to Dashboard Rejected License   Count.");
						test.log(LogStatus.FAIL, "No of Rejected License  in the grid = "+total+" | Dashboard Rejected License  Count = "+RejectedLicense);
					}
					Thread.sleep(3000);
					//js1.executeScript("window.scrollBy(2000,0)");     //Scrolling UP window by 2000 px.
					//Thread.sleep(3000);
					
					MethodPOM.ClickActiveOverview().click();
					test.log(LogStatus.PASS, " License Overview Details Successfully");
					Thread.sleep(3000);
					MethodPOM.ClickCloseOverview().click();
					Thread.sleep(3000);
					LiPerformerPOM.editlicenseicon().click();
					Thread.sleep(5000);
					licenseManagement.licmgmtPOM.LicenseTitle().clear();
					Thread.sleep(5000);
					licenseManagement.licmgmtPOM.LicenseTitle().sendKeys("update License");	
					Thread.sleep(5000);
					licenseManagement.licmgmtPOM.LicenseNo().sendKeys("Reject Update Lice");
					Thread.sleep(5000);
					js1.executeScript("window.scrollBy(0,2000)");
					Thread.sleep(3000);
					 Actions act =new Actions(getDriver());
		                act.sendKeys(Keys.PAGE_DOWN).build().perform();
		                Thread.sleep(3000);
					//LiPerformerPOM.editnomineebtn.click();
					/*Thread.sleep(3000);
					 licmgmtPOM.ClickNomineedrp.click();
					 Thread.sleep(3000);
					 licmgmtPOM.SelectNominee.click();
					 
					 Thread.sleep(5000);
					js1.executeScript("window.scroll(0,2000)");
					 Thread.sleep(5000);
					 licmgmtPOM.ClickModificdate.click();
					 Thread.sleep(6000);	
					 js1.executeScript("window.scroll(0,2000)");
					 Thread.sleep(6000);		 
					 licmgmtPOM.ModificatioDate.click();		 
					 Thread.sleep(6000);
					 js1.executeScript("window.scroll(0,2000)");
					 licmgmtPOM.nomineestartdatecal.click();
					 Thread.sleep(3000);
					 licmgmtPOM.selectnominstartdate.click();
					 Thread.sleep(3000);
					 JavascriptExecutor js2=(JavascriptExecutor) driver ;
						js2.executeScript("window.scroll(0,2000)");
					 licmgmtPOM.nomineeEnddatecal.click();
					 Thread.sleep(5000);
					 licmgmtPOM.selectnomineenddate.click();
					 Thread.sleep(5000);
				*/
					licenseManagement.licmgmtPOM.Nomineesubmit().click();
					 // Switching to Alert       
			        Alert alert =getDriver().switchTo().alert();
			       
			        // Capturing alert message.   
			        String alertMessage= getDriver().switchTo().alert().getText();
			       
			        Thread.sleep(3000);
			      //  test.log(LogStatus.PASS, alertMessage);
			       
			        // Displaying alert message
			       // System.out.println(alertMessage);
			        // Accepting alert
			        /*Thread.sleep(3000);
			        By locator = By.xpath("//*[@class='k-button-group k-dialog-buttongroup k-dialog-button-layout-stretched']");

			    	wait.until(ExpectedConditions.presenceOfElementLocated(locator));
			    	Thread.sleep(4000);
			    	
			    	WebElement ViewButton = driver.findElement(locator);	
			    	Thread.sleep(3000);
			    JavascriptExecutor jse=(JavascriptExecutor)driver;
			    jse.executeScript("arguments[0].click();", ViewButton);
			    	Thread.sleep(4000);
			        
			      //  LiPerformerPOM.licenseOK.click();
			        
			     */
			        // Accepting alert
			        alert.accept();
			        test.log(LogStatus.PASS,"License Details Updated Successfully" );
			        
			          Thread.sleep(5000);
			          
			          licmgmtPOM.editlicenseclose().click();
			          Thread.sleep(300);
			          Thread.sleep(10000);
						CFOcountPOM.readTotalItems1().click();
						
						String item2 = CFOcountPOM.readTotalItems1().getText();
						//String NoRecord = LiReviewerPOM.reNorecord.getText();
						 if(!item1.equalsIgnoreCase("No items to display")) 
						 {
						String[] bits1 = item1.split(" ");								//Splitting the String
						String compliancesCount1 = bits1[bits1.length - 2];				//Getting the second last word (total number of users)
						int count2 = Integer.parseInt(compliancesCount1);
						String NoRecord = LiReviewerPOM.reNorecord().getText();
						   if(!NoRecord.equalsIgnoreCase("No items to display")) 
						 {
							   try
								{
									performerPOM.clickExcelReport().sendKeys(Keys.PAGE_DOWN);
								}
								catch(Exception e)
								{
									
								}
								js1.executeScript("window.scrollBy(0,1000)");
								
							
								Thread.sleep(100);
								File dir = new File("C://Users//deepalid//Downloads");
								File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
								
								Thread.sleep(500);
								CFOcountPOM.clickNextPage1().sendKeys(Keys.PAGE_UP);
								Thread.sleep(250);
								licenseManagement.licmgmtPOM.WorkspaceExport().click();
								//performerPOM.clickExcelReport().click();					//Clicking on 'Excel Report' image.
								
								
								Thread.sleep(500);
								File dir1 = new File("C://Users//deepalid//Downloads");
								File[] allFilesNew = dir1.listFiles();							//Counting number of files in directory after download
								
								if(dirContents.length < allFilesNew.length)
								{
									test.log(LogStatus.PASS, "File downloaded successfully.");
									
									File lastModifiedFile = allFilesNew[1];			//Storing any 0th index file in 'lastModifiedFile' file name.
								    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
								    {
								       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified()) 	//If allFilesNew[i] file is having large/latest time time of update then latest modified file be allFilesNew[i] file.
								       {
								           lastModifiedFile = allFilesNew[i];
								       }
								    }
									
									Thread.sleep(100);
									fis = new FileInputStream(lastModifiedFile);
									workbook = new XSSFWorkbook(fis);
									sheet = workbook.getSheetAt(0);					//Retrieving first sheet of Workbook
									
									int no = sheet.getLastRowNum();
									Row row = sheet.getRow(no);
									Cell c1 = row.getCell(0);
									int records =(int) c1.getNumericCellValue();
									fis.close();
									
									if(count2 == records)
									{
										//test.log(LogStatus.PASS, "Notice=No of records from grid matches to no of records in Excel Sheet.");
										test.log(LogStatus.PASS, "For "+type+" status total records from Grid = "+count2+" | Total records from Report = "+records);
									}
									else
									{
										//test.log(LogStatus.FAIL, "Notice=No of records from grid doesn't matches to no of records in Excel Sheet.");
										test.log(LogStatus.FAIL, "For "+type+" status total records from Grid = "+count2+" | Total records from Excel Sheet = "+records);
									}
								}
								else
								{
									test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
								}
						 }
			          
			          MethodPOM.clickMyDashboard().click();
			          Thread.sleep(1000);
						  }
						  else
						  {
							   		      
							test.log(LogStatus.PASS,"No Record Found");
							MethodPOM.clickMyDashboard().click();
								      
						  }
							  }
			          MethodPOM.clickMyDashboard().click();
			          Thread.sleep(1000);
			         // MethodPOM.clickActive.click();	
			          
			        //  Thread.sleep(3000);
				//	LiPerformerPOM.clickAction.click();					//Clicking on first action button.
					
					//progress;
					
					//Thread.sleep(500);
				

				//	LiPerformerPOM.clickAction.click();					//Clicking on first action button.
					
					progress();
					
					Thread.sleep(500);
				//	wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("ContentPlaceHolder1_showReminderDetail"));
					
					if(type.equalsIgnoreCase("Internal"))
					{
						WebDriverWait wait1 = new WebDriverWait(getDriver(), (30));
						wait1.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
						LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
						
						
						Select drp = new Select(LiPerformerPOM.clickType());
						drp.selectByIndex(1);
						CFOcountPOM.clickApply1().click();	
						  Thread.sleep(3000);
						 
						MethodPOM.clickRejected().click();	

						OverduePOM.RejectedAction().click();					//Clicking on first action button.
				        Thread.sleep(3000);
				     
				        wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("ContentPlaceHolder1_showReminderDetail"));
						js1.executeScript("window.scrollBy(0,2000)");
						wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectInternalDropdown()));
						Select status = new Select(OverduePOM.selectInternalDropdown());	//Selecting Status dropdown box.
						status.selectByIndex(2);									//Selecting 2nd value from dropdown.
					}
					else
					{
						MethodPOM.clickRejected().click();
						 Thread.sleep(5000);
						LiPerformerPOM.rejectAction().click();					//Clicking on first action button.
				        Thread.sleep(3000);
				     
						wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("ContentPlaceHolder1_showReminderDetail"));		
						js1.executeScript("window.scrollBy(0,1000)");
					    Thread.sleep(5000);
						wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectStatutoryDropdown()));
						Select status = new Select(OverduePOM.selectStatutoryDropdown());	//Selecting Status dropdown box.
						status.selectByIndex(2);									//Selecting 2nd value from dropdown.
					}
					
					try
					{
						Thread.sleep(300);
						wait.until(ExpectedConditions.invisibilityOf(LiPerformerPOM.Progress()));
					}
					catch(Exception e)
					{
						
					}
					
					licenseReviewer.LiReMethodsPOM.perform( test);			//Calling perform method of Reviewer.
					
					try
					{
						Thread.sleep(500);
						LiPerformerPOM.clickCheckbox().click();			//Clicking on checkbox of Penalty values
						js1.executeScript("window.scrollBy(0,300)");
					}
					catch(Exception e)
					{
						
					}
					
					Thread.sleep(500);
					js1.executeScript("window.scrollBy(0,700)");
					Thread.sleep(3000);
					OverduePOM.clickComplianceSubmit().click();			//Clicking on 'Submit' button.
					
					Thread.sleep(1000);
					js1.executeScript("window.scrollBy(1000,0)");				//Scrolling down window by 2000 px.
					
					Thread.sleep(3000);
					if(type.equalsIgnoreCase("Statutory"))
					{
						String msg = LiPerformerPOM.readMessage().getText();
						if(msg.equalsIgnoreCase("Saved Sucessfully."))
						{
							test.log(LogStatus.PASS, "Message Displayed = "+msg);
						}
						else
						{
							test.log(LogStatus.FAIL, "Message Displayed = "+msg);
						}
						
						Thread.sleep(500);
						js1.executeScript("window.scrollBy(2000,0)");			//Scrolling up window by 2000 px.
						
					getDriver().switchTo().parentFrame();
						
						Thread.sleep(700);
						LiPerformerPOM.clickClose().click();				//Clicking on Close (Cross)
						getDriver().navigate().refresh();
					}
					else
					{
						Thread.sleep(700);
						test.log(LogStatus.PASS,"No Record Found");
						MethodPOM.clickMyDashboard().click();
					}
					
					}
					
		
	
	public static void TerminateLicense1( ExtentTest test, String type) throws InterruptedException, IOException
	   {
		  
			   
		  WebDriverWait wait = new WebDriverWait( getDriver(), (30));
			
			wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.terminatedPerformer()));
			String Terminate=LiPerformerPOM.terminatedPerformer().getText();
			
		     int TerminateLicense = Integer.parseInt(Terminate);	//Reading Terminate count.

		     LiPerformerPOM.terminatedPerformer().click();					//Clicking on 'Terminate ' image
		      Thread.sleep(4000);
		        JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
				js1.executeScript("window.scroll(0,500)");
				Thread.sleep(4000);
				
				LicenseCompanyadmin.MethodPOM.clickReadTerminate().click();					//Clicking on total items count
				Thread.sleep(500);
				String item = MethodPOM.clickReadTerminate().getText();	//Reading total items String value
				String[] bits = item.split(" ");								//Splitting the String
				String LicensTerminate= bits[bits.length - 2];		//Getting the second last word (total number of users)
				
				//int total = Integer.parseInt(MethodPOM.clickReadActive.getText());
				int total = Integer.parseInt(LicensTerminate);
				if(TerminateLicense == total)
					{
						//test.log(LogStatus.PASS, "Number of Terminate License  grid matches to Dashboard Terminate  License   Count.");
						test.log(LogStatus.PASS, "No of Terminate  License  in the grid = "+total+" | Dashboard Terminate License  Count = "+TerminateLicense);
					}
					else
					{
						//test.log(LogStatus.FAIL, "Number of Terminate License does not matches to Dashboard Terminate License   Count.");
						test.log(LogStatus.FAIL, "No of Terminate License  in the grid = "+total+" | Dashboard Terminate License  Count = "+TerminateLicense);
					}
					Thread.sleep(3000);
					//js1.executeScript("window.scrollBy(2000,0)");     //Scrolling UP window by 2000 px.
					//Thread.sleep(3000);
					
					LicenseCompanyadmin.MethodPOM.ClickActiveOverview().click();
					Thread.sleep(3000);
					test.log(LogStatus.PASS, " License Overview Details Successfully");
					Thread.sleep(3000);
					LicenseCompanyadmin.MethodPOM.ClickCloseOverview().click();
          
					//LiPerformerPOM.clickAction.click();					//Clicking on first action button.
					LiPerformerPOM.editlicenseicon().click();
					Thread.sleep(5000);
					//licenseManagement.licmgmtPOM.LicenseTitle().clear();
					Thread.sleep(5000);
					licenseManagement.licmgmtPOM.LicenseTitle().sendKeys(".");	
					Thread.sleep(5000);
					licenseManagement.licmgmtPOM.LicenseNo().sendKeys(".");
					Thread.sleep(5000);
					js1.executeScript("window.scrollBy(0,2000)");
					Thread.sleep(3000);
					 Actions act =new Actions(getDriver());
		                act.sendKeys(Keys.PAGE_DOWN).build().perform();
		                Thread.sleep(3000);
					
					licenseManagement.licmgmtPOM.Nomineesubmit().click();
					 // Switching to Alert       
			        Alert alert = getDriver().switchTo().alert();
			       
			        // Capturing alert message.   
			        String alertMessage= getDriver().switchTo().alert().getText();
			       
			        Thread.sleep(3000);
			      
			        // Accepting alert
			        alert.accept();
			        test.log(LogStatus.PASS,"License Details Updated Successfully" );
			        
			          Thread.sleep(5000);
			          
			          licmgmtPOM.editlicenseclose().click();
			          Thread.sleep(300);
			          
			   
			         // MethodPOM.clickActive.click();	
			          
			        //  Thread.sleep(3000);
				//	LiPerformerPOM.clickAction.click();					//Clicking on first action button.
					
					//progress;
					
					//Thread.sleep(500);
				

				//	LiPerformerPOM.clickAction.click();					//Clicking on first action button.
					
					progress();
					
					Thread.sleep(500);
				//	wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("ContentPlaceHolder1_showReminderDetail"));
		
					progress();
					
		
					//wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("showdetails"));
					
					if(type.equalsIgnoreCase("Internal"))
					{
						WebDriverWait wait1 = new WebDriverWait(getDriver(), (30));
						wait1.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
						LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
						
						
						Select drp = new Select(LiPerformerPOM.clickType());
						drp.selectByIndex(1);
						CFOcountPOM.clickApply1().click();	
						  Thread.sleep(3000);
						 
						LiPerformerPOM.terminatedPerformer().click();	

						 Thread.sleep(10000);
							CFOcountPOM.readTotalItems1().click();
							
							String item2 = CFOcountPOM.readTotalItems1().getText();
							//String NoRecord = LiReviewerPOM.reNorecord.getText();
							 if(!item.equalsIgnoreCase("No items to display")) 
							 {
							String[] bits1 = item.split(" ");								//Splitting the String
							String compliancesCount1 = bits1[bits1.length - 2];				//Getting the second last word (total number of users)
							int count2 = Integer.parseInt(compliancesCount1);
							String NoRecord = LiReviewerPOM.reNorecord().getText();
							   if(!NoRecord.equalsIgnoreCase("No items to display")) 
							 {
								   try
									{
										performerPOM.clickExcelReport().sendKeys(Keys.PAGE_DOWN);
									}
									catch(Exception e)
									{
										
									}
									js1.executeScript("window.scrollBy(0,1000)");
									
								
									Thread.sleep(100);
									File dir = new File("C://Users//deepalid//Downloads");
									File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
									
									Thread.sleep(500);
									CFOcountPOM.clickNextPage1().sendKeys(Keys.PAGE_UP);
									Thread.sleep(250);
									licenseManagement.licmgmtPOM.WorkspaceExport().click();
									//performerPOM.clickExcelReport().click();					//Clicking on 'Excel Report' image.
									
									
									Thread.sleep(500);
									File dir1 = new File("C://Users//deepalid//Downloads");
									File[] allFilesNew = dir1.listFiles();							//Counting number of files in directory after download
									
									if(dirContents.length < allFilesNew.length)
									{
										test.log(LogStatus.PASS, "File downloaded successfully.");
										
										File lastModifiedFile = allFilesNew[1];			//Storing any 0th index file in 'lastModifiedFile' file name.
									    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
									    {
									       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified()) 	//If allFilesNew[i] file is having large/latest time time of update then latest modified file be allFilesNew[i] file.
									       {
									           lastModifiedFile = allFilesNew[i];
									       }
									    }
										
										Thread.sleep(100);
										fis = new FileInputStream(lastModifiedFile);
										workbook = new XSSFWorkbook(fis);
										sheet = workbook.getSheetAt(0);					//Retrieving first sheet of Workbook
										
										int no = sheet.getLastRowNum();
										Row row = sheet.getRow(no);
										Cell c1 = row.getCell(0);
										int records =(int) c1.getNumericCellValue();
										fis.close();
										
										if(count2 == records)
										{
											//test.log(LogStatus.PASS, "Notice=No of records from grid matches to no of records in Excel Sheet.");
											test.log(LogStatus.PASS, "For "+type+" status total records from Grid = "+count2+" | Total records from Report = "+records);
										}
										else
										{
											//test.log(LogStatus.FAIL, "Notice=No of records from grid doesn't matches to no of records in Excel Sheet.");
											test.log(LogStatus.FAIL, "For "+type+" status total records from Grid = "+count2+" | Total records from Excel Sheet = "+records);
										}
									}
									else
									{
										test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
									}
							 }
				          
							   else
							   {
								   CFOcountPOM.readTotalItems1().click();
									
									String item3 = CFOcountPOM.readTotalItems1().getText();
									//String NoRecord = LiReviewerPOM.reNorecord.getText();
									 if(!item3.equalsIgnoreCase("No items to display")) 
									 {
									String[] bits2 = item.split(" ");								//Splitting the String
									String compliancesCount2 = bits2[bits2.length - 2];				//Getting the second last word (total number of users)
									int count3 = Integer.parseInt(compliancesCount1);
									String NoRecord1 = LiReviewerPOM.reNorecord().getText();
									   if(!NoRecord1.equalsIgnoreCase("No items to display")) 
									 {
										   try
											{
												performerPOM.clickExcelReport().sendKeys(Keys.PAGE_DOWN);
											}
											catch(Exception e)
											{
												
											}
											js1.executeScript("window.scrollBy(0,1000)");
											
										
											Thread.sleep(100);
											File dir = new File("C://Users//deepalid//Downloads");
											File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
											
											Thread.sleep(500);
											CFOcountPOM.clickNextPage1().sendKeys(Keys.PAGE_UP);
											Thread.sleep(250);
											licenseManagement.licmgmtPOM.WorkspaceExport().click();
											//performerPOM.clickExcelReport().click();					//Clicking on 'Excel Report' image.
											
											
											Thread.sleep(500);
											File dir1 = new File("C://Users//deepalid//Downloads");
											File[] allFilesNew = dir1.listFiles();							//Counting number of files in directory after download
											
											if(dirContents.length < allFilesNew.length)
											{
												test.log(LogStatus.PASS, "File downloaded successfully.");
												
												File lastModifiedFile = allFilesNew[1];			//Storing any 0th index file in 'lastModifiedFile' file name.
											    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
											    {
											       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified()) 	//If allFilesNew[i] file is having large/latest time time of update then latest modified file be allFilesNew[i] file.
											       {
											           lastModifiedFile = allFilesNew[i];
											       }
											    }
												
												Thread.sleep(100);
												fis = new FileInputStream(lastModifiedFile);
												workbook = new XSSFWorkbook(fis);
												sheet = workbook.getSheetAt(0);					//Retrieving first sheet of Workbook
												
												int no = sheet.getLastRowNum();
												Row row = sheet.getRow(no);
												Cell c1 = row.getCell(0);
												int records =(int) c1.getNumericCellValue();
												fis.close();
												
												if(count3 == records)
												{
													//test.log(LogStatus.PASS, "Notice=No of records from grid matches to no of records in Excel Sheet.");
													test.log(LogStatus.PASS, "For "+type+" status total records from Grid = "+count3+" | Total records from Report = "+records);
												}
												else
												{
													//test.log(LogStatus.FAIL, "Notice=No of records from grid doesn't matches to no of records in Excel Sheet.");
													test.log(LogStatus.FAIL, "For "+type+" status total records from Grid = "+count3+" | Total records from Excel Sheet = "+records);
												}
											}
											else
											{
												test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
											}
								   
							   }
				          MethodPOM.clickMyDashboard().click();
				          Thread.sleep(1000);
							  }
							  else
							  {
								   		      
								test.log(LogStatus.PASS,"No Record Found");
								MethodPOM.clickMyDashboard().click();
									      
							  }
								  }
					
							 }}
		   
	   }
	   
				
	   

	public static void LicenseExpiredOnperInternal( ExtentTest test, String string) throws InterruptedException
	{
		 /*Thread.sleep(3000);
		  LicenseCompanyadmin.MethodPOM.AllFilter.click();
		   Thread.sleep(3000);
		   LicenseCompanyadmin.MethodPOM.InternalFilter.click();
		   
		   LicenseCompanyadmin.MethodPOM.ClickApply.click();*/
	   Thread.sleep(3000);
	   MethodPOM.ClickMaximizeLicenseExpiredOn().click();
	   test.log(LogStatus.PASS, "Expired Maximize Button Working Successfully");
	 
	   Thread.sleep(3000);
	   JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
		js1.executeScript("window.scroll(0,500)");
		Thread.sleep(500);
		 MethodPOM.ClickOnDashExpiredExport().click();  
		 test.log(LogStatus.PASS, "Dashboard Expired On License List Downloaded Successfully");
		
		/* MethodPOM.ClickShowMoreExpiredOnInternal().click();
		 test.log(LogStatus.PASS, "Expired On showMore Link Working Successfully");
		 WebDriverWait wait = new WebDriverWait(getDriver(), (30));
		   wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("showLicenseDetails"));
		   Thread.sleep(5000);
		 String NoRecord = MethodPOM.Norecord().getText();
		 
		   if(!NoRecord.equalsIgnoreCase("No items to display")) 
		   {
		   
		   MethodPOM.ClickExportExpiredOn().click();
			test.log(LogStatus.PASS, "Expired License List Downloaded Successfully");
			Thread.sleep(5000);
			MethodPOM.ClickOverviewExpiredOn().click();
	
	  test.log(LogStatus.PASS, " License Overview Details Successfully");
	  Thread.sleep(7000);
     MethodPOM.clickBystatuscloseoverview().click();
		Thread.sleep(2000);
		   }
		  // Js.executeScript("window.scrollBy(500,0)");
	//	driver.switchTo().parentFrame();
		// MethodPOM.clickCloseGraphPopup.click();
		// Thread.sleep(7000);
		
		 /*LiPerformerPOM.EntityLocation().click();
			Thread.sleep(500);
			LiPerformerPOM.EntityLocationExpand().click();
			Thread.sleep(500);
			//LiPerformerPOM.EntityLocationExpand.click();
			//Thread.sleep(500);
		   Thread.sleep(500);
		   LiPerformerPOM.Entitysubexpand().click();
		   Thread.sleep(500);
		   String locationtext1 =LiPerformerPOM.locget().getText();
		   LiPerformerPOM.locget().click();
		   Thread.sleep(3000);
		   LiPerformerPOM.clicklictypet().click();
		   Thread.sleep(500);
		   String LicenseType1 =LiPerformerPOM.Licensetype().getText();
		   Thread.sleep(5000);
		   LiPerformerPOM.Licensetype().click();
		   Thread.sleep(5000);
		  // LiPerformerPOM.Statustext.click();
		  // Thread.sleep(5000);
		  
		    List<String> li=new ArrayList<String>();
		    
		    li.add(locationtext1);
		    li.add(LicenseType1);
		 
		    Thread.sleep(3000);
		    
			List<String> filter=new ArrayList<String>();	
			filter.add("Location");
			filter.add("LicenseType");	
			
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("window.scrollBy(0,150)");	
			Thread.sleep(3000);

			CFOcountPOM.readTotalItems1().click();					//Clicking on Text of total items just to scroll down.
			String s = CFOcountPOM.readTotalItems1().getText();
			Thread.sleep(2000);

			if(!s.equalsIgnoreCase("No items to display")) 
			{
			Thread.sleep(5000);

			List<WebElement> entitycol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[1]"));
			
			List<WebElement> liccol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[2]"));
			//List<WebElement> Actcol=driver.findElements(By.xpath("//*[@id='grid']/div[3]/table/tbody/tr/td[2]"));
			Thread.sleep(2000);

			for(int i=0; i<li.size(); i++){
				
				List<String> text= new ArrayList<String>();
				HashSet<String> pass=new LinkedHashSet<>();
				HashSet<String> fail=new LinkedHashSet<>();
				List<WebElement> raw=new ArrayList<WebElement>();

					if(i==0)
					{
						raw.addAll(entitycol);
					}
				else if(i==1)
					{
						raw.addAll(liccol);
					}
				
					
				for(int k=0;k<raw.size();k++)
					{
						text.add(raw.get(k).getText());
					}

					for(int l=0;l<text.size();l++)
						{
					if(text.get(l).equals(li.get(i)))
						{
							pass.add(text.get(l));	
							System.out.println("pass : "+text.get(l)+" : "+li.get(i));

						}
					else
					{
						fail.add(text.get(l));		
						System.out.println("fail : "+text.get(l)+" : "+li.get(i));
						System.out.println(i);

					}
					 }
			 
		for(String Fal : fail)
			 {
					test.log(LogStatus.FAIL, filter.get(i)+" column shows incorrect value : "+Fal);
			 }	
			 for(String Pas : pass)
			 {
				 test.log(LogStatus.PASS,  filter.get(i)+" dropdown working properly.");
					test.log(LogStatus.PASS, filter.get(i)+" displayed : "+Pas);	
					System.out.println(filter.get(i)+" : "+Pas);
		 }
			 text.clear();
			pass.clear();
			fail.clear();
			raw.clear();
			
			
			}
 }
 else
 {
		test.log(LogStatus.PASS,"Selected Location and License Type No Record Found");
 }

Boolean  btnclear =LiPerformerPOM.clearbtn().isEnabled();
if(btnclear) 
{
LiPerformerPOM.clearbtn().click();
test.log(LogStatus.PASS,"Clear Button Working Successfully");
}
else
{
test.log(LogStatus.FAIL,"Clear Button Not Clickable");
}

		   }*/
 }

	

	public static void activelicenseperform( ExtentTest test, String type) throws InterruptedException
	{
		
		WebDriverWait wait = new WebDriverWait(getDriver(), (30));
		
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickActive()));
		String Active=MethodPOM.clickActive().getText();
		
	     int Activelicense = Integer.parseInt(Active);	//Reading Active count.

	     wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.PFRCount()));
	     String pfr=LiPerformerPOM.PFRCount().getText();
	     int pfrlicense = Integer.parseInt(pfr);	//Reading PendingForReview count.

	      MethodPOM.clickActive().click();					//Clicking on 'Active' image
	      Thread.sleep(4000);
	        JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
			js1.executeScript("window.scroll(0,500)");
			Thread.sleep(4000);
			
			String item1 = MethodPOM.clickReadExpired().getText();	//Reading total items String value
			  if(!item1.equalsIgnoreCase("No items to display"))
			  {
		/*	MethodPOM.clickReadActive.click();					//Clicking on total items count
			Thread.sleep(500);
			String item = MethodPOM.clickReadActive.getText();	//Reading total items String value
			String[] bits = item.split(" ");								//Splitting the String
			String LicenseActiveCount = bits[bits.length - 2];		//Getting the second last word (total)
			int total = Integer.parseInt(LicenseActiveCount);
			
			if(Activelicense == total)
	{
		//test.log(LogStatus.PASS, "Dashboard 'Expired' count matches to the total records displayed in grid.");
		test.log(LogStatus.PASS, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
	}
	else
	{
		//test.log(LogStatus.FAIL, "Dashboard 'Expired' count doesn't matches to the total records displayed in grid.");
		test.log(LogStatus.FAIL, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
	}
	*/
	   
    Thread.sleep(3000);
    OverduePOM.ActiveAction().click();	//Clicking on first action button.
	                                          //Selecting 2nd value from dropdown.//Selecting 2nd value from dropdown.
    Thread.sleep(6000);
	wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(LiPerformerPOM.ShowFream()));	
	 String Ispermenant = LiPerformerPOM.ispermessage().getText(); 
    if(!Ispermenant.equalsIgnoreCase("This compliance is already submitted for review or already closed."))
    {
    	js1.executeScript("window.scrollBy(0,500)");
    	Thread.sleep(6000);
	//wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(LiPerformerPOM.ShowFream()));		
	//js1.executeScript("window.scrollBy(0,500)");
    Thread.sleep(2000);
	wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectStatutoryDropdown()));
	Select status = new Select(OverduePOM.selectStatutoryDropdown());	//Selecting Status dropdown box.
	status.selectByIndex(1);	
	 Thread.sleep(2000);
	 String workingDir = System.getProperty("user.dir");
   OverduePOM.PerformerDoc().sendKeys(workingDir+"//Reports//LicenseCompanyadmin(Statutory).html");	//uploading new file	
   Thread.sleep(2000);
   js1.executeScript("window.scrollBy(0,1000)");
   Thread.sleep(2000);
	LiPerformerPOM.PerformDateclick().click();
	Thread.sleep(1000);
	LiPerformerPOM.Priviouscalnder().click();
	Thread.sleep(1000);
	LiPerformerPOM.PerformDate().click();
	Thread.sleep(5000);
	js1.executeScript("window.scrollBy(0,1000)");

	//LiPerformerPOM.clickCheckbox.click();			//Clicking on checkbox of Penalty values
	//js1.executeScript("window.scrollBy(0,300)");

Thread.sleep(500);
js1.executeScript("window.scrollBy(0,700)");
Thread.sleep(300);
OverduePOM.clickComplianceSubmit().click();			//Clicking on 'Submit' button.

Thread.sleep(3000);
js1.executeScript("window.scrollBy(1000,0)");				//Scrolling down window by 2000 px.

Thread.sleep(300);
if(type.equalsIgnoreCase("Statutory"))
{
	
	Thread.sleep(500);
	js1.executeScript("window.scrollBy(2000,0)");	//Scrolling up window by 2000 px.
	test.log(LogStatus.PASS, "Save Sucessfully.");
}
else
	{
	test.log(LogStatus.FAIL, "This compliance already closed");
	 }
getDriver().switchTo().parentFrame();

Thread.sleep(7000);
LiPerformerPOM.clickClose().click();
//Clicking on Close (Cross)
getDriver().navigate().refresh();
Thread.sleep(7000);
MethodPOM.clickMyDashboard().click();


wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickActive()));
String Active1=MethodPOM.clickActive().getText();

 int Activelicense1 = Integer.parseInt(Active1);	//Reading Active count.

 wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.PFRCount()));
 String pfr1=LiPerformerPOM.PFRCount().getText();
 int pfrlicense1 = Integer.parseInt(pfr1);	//Reading PendingForReview count.
 
 if(Activelicense>Activelicense1&&pfrlicense<pfrlicense1)
 {
	 test.log(LogStatus.PASS, "Active Old Count = "+Activelicense+" | New Count = "+Activelicense1);
     test.log(LogStatus.PASS, "Pendingforreview Old Count = "+pfrlicense+" | New Count = "+pfrlicense1);
 }
 else
 {
	 test.log(LogStatus.FAIL, "Active Old Count = "+Activelicense+" | New Count = "+Activelicense1);
     test.log(LogStatus.FAIL, "Pendingforreview Old Count = "+pfrlicense+" | New Count = "+pfrlicense1);
 }
    }
			  
    else
    {
    	//LiPerformerPOM.isperclosePopup().click();
    	getDriver().switchTo().parentFrame();
    	test.log(LogStatus.PASS,"This Is Permanent Active License ");
    	
		  }
			  }
			  else
				  
			     {
					      
						test.log(LogStatus.PASS,"No Record Found");
						MethodPOM.clickMyDashboard().click();
			    	 
			     }
	}
   
			  
	
	public static void Internalactivelicenseperform( ExtentTest test, String type) throws InterruptedException
	{
		WebDriverWait wait = new WebDriverWait(getDriver(), (30));
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
		LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
		
		
		Select drp = new Select(LiPerformerPOM.clickType());
		drp.selectByIndex(1);
		CFOcountPOM.clickApply1().click();	
		  Thread.sleep(3000);
		
	
		
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickActive()));
		String Active=MethodPOM.clickActive().getText();
		
	     int Activelicense = Integer.parseInt(Active);	//Reading Active count.

	     wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.PFRCount()));
	     String pfr=LiPerformerPOM.PFRCount().getText();
	     int pfrlicense = Integer.parseInt(pfr);	//Reading PendingForReview count.

	      MethodPOM.clickActive().click();					//Clicking on 'Active' image
	      Thread.sleep(4000);
	        JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
			js1.executeScript("window.scroll(0,500)");
			Thread.sleep(4000);
			
		/*	MethodPOM.clickReadActive.click();					//Clicking on total items count
			Thread.sleep(500);
			String item = MethodPOM.clickReadActive.getText();	//Reading total items String value
			String[] bits = item.split(" ");								//Splitting the String
			String LicenseActiveCount = bits[bits.length - 2];		//Getting the second last word (total)
			int total = Integer.parseInt(LicenseActiveCount);
			
			if(Activelicense == total)
	{
		//test.log(LogStatus.PASS, "Dashboard 'Expired' count matches to the total records displayed in grid.");
		test.log(LogStatus.PASS, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
	}
	else
	{
		//test.log(LogStatus.FAIL, "Dashboard 'Expired' count doesn't matches to the total records displayed in grid.");
		test.log(LogStatus.FAIL, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
	}
	*/
	   
    Thread.sleep(3000);
    OverduePOM.ActiveAction().click();					//Clicking on first action button.
	                                          //Selecting 2nd value from dropdown.//Selecting 2nd value from dropdown.
    wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("ContentPlaceHolder1_showReminderDetail"));
	js1.executeScript("window.scrollBy(0,3000)");
	 Thread.sleep(3000);
	wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectInternalDropdown()));
	Select status = new Select(OverduePOM.selectInternalDropdown());	//Selecting Status dropdown box.
	status.selectByIndex(1);	
	 Thread.sleep(3000);
	 String workingDir = System.getProperty("user.dir");
		OverduePOM.fileUploadInternal().sendKeys(workingDir+"//TestData//ComplianceSheet.xlsx");	//Uploading file by sending file to Upload Button. (Internal)
		Thread.sleep(1000);
		js1.executeScript("window.scrollBy(0,1000)");
		Thread.sleep(500);
	 LiPerformerPOM.indate().sendKeys("01-08-2023");
	Thread.sleep(5000);
	 LiPerformerPOM.justclick().click();
	js1.executeScript("window.scrollBy(0,1000)");

	//LiPerformerPOM.clickCheckbox.click();			//Clicking on checkbox of Penalty values
	//js1.executeScript("window.scrollBy(0,300)");

Thread.sleep(500);
js1.executeScript("window.scrollBy(0,700)");
Thread.sleep(3000);
OverduePOM.clickComplianceSubmit().click();			//Clicking on 'Submit' button.

Thread.sleep(1000);
js1.executeScript("window.scrollBy(1000,0)");				//Scrolling down window by 2000 px.

Thread.sleep(300);
if(type.equalsIgnoreCase("Statutory"))
{
	
	Thread.sleep(500);
	js1.executeScript("window.scrollBy(2000,0)");	//Scrolling up window by 2000 px.
}
else
	{
	test.log(LogStatus.PASS, "Save Sucessfully.");
	 }
	getDriver().switchTo().parentFrame();
	
	Thread.sleep(700);
	LiPerformerPOM.clickClose().click();				//Clicking on Close (Cross)
//	getDriver().navigate().refresh();
	MethodPOM.clickMyDashboard().click();
	
	wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
	LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
	
	
	Select drp1 = new Select(LiPerformerPOM.clickType());
	Thread.sleep(7000);
	drp1.selectByIndex(1);
	CFOcountPOM.clickApply1().click();	
	  Thread.sleep(3000);
	
	wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickActive()));
	String Active1=MethodPOM.clickActive().getText();
	
     int Activelicense1 = Integer.parseInt(Active1);	//Reading Active count.

     wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.PFRCount()));
     String pfr1=LiPerformerPOM.PFRCount().getText();
     int pfrlicense1 = Integer.parseInt(pfr1);	//Reading PendingForReview count.
     
     if(Activelicense>Activelicense1&&pfrlicense<pfrlicense1)
     {
    	 test.log(LogStatus.PASS, "Active Old Count = "+Activelicense+" | New Count = "+Activelicense1);
         test.log(LogStatus.PASS, "Pendingforreview Old Count = "+pfrlicense+" | New Count = "+pfrlicense1);
     }
     else
     {
    	 test.log(LogStatus.FAIL, "Active Old Count = "+Activelicense+" | New Count = "+Activelicense1);
         test.log(LogStatus.FAIL, "Pendingforreview Old Count = "+pfrlicense+" | New Count = "+pfrlicense1);
     }
     
	}
	
	public static void Expiringlicenseperform( ExtentTest test, String type) throws InterruptedException
	{
		WebDriverWait wait = new WebDriverWait(getDriver(), (30));
		
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpiring()));
		String Expiring=MethodPOM.clickExpiring().getText();
		
	     int Expiringlicense = Integer.parseInt(Expiring);	//Reading Active count.
	     
	     wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.PFRCount()));
	     String pfr=LiPerformerPOM.PFRCount().getText();
	     int pfrlicense = Integer.parseInt(pfr);	//Reading PendingForReview count.

	      MethodPOM.clickExpiring().click();					//Clicking on 'Expiring' image
	      Thread.sleep(4000);
	        JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
			js1.executeScript("window.scroll(0,500)");
			Thread.sleep(4000);
			String item1 = MethodPOM.clickReadExpired().getText();	//Reading total items String value
			  if(!item1.equalsIgnoreCase("No items to display"))
			  {
		/*	MethodPOM.clickReadActive.click();					//Clicking on total items count
			Thread.sleep(500);
			String item = MethodPOM.clickReadActive.getText();	//Reading total items String value
			String[] bits = item.split(" ");								//Splitting the String
			String LicenseActiveCount = bits[bits.length - 2];		//Getting the second last word (total)
			int total = Integer.parseInt(LicenseActiveCount);
			
			if(Activelicense == total)
	{
		//test.log(LogStatus.PASS, "Dashboard 'Expired' count matches to the total records displayed in grid.");
		test.log(LogStatus.PASS, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
	}
	else
	{
		//test.log(LogStatus.FAIL, "Dashboard 'Expired' count doesn't matches to the total records displayed in grid.");
		test.log(LogStatus.FAIL, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
	}
	*/
	   
    Thread.sleep(3000);
    OverduePOM.ActiveAction().click();	
	                                          //Selecting 2nd value from dropdown.//Selecting 2nd value from dropdown.
	wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(LiPerformerPOM.ShowFream()));		
	js1.executeScript("window.scrollBy(0,1000)");
   Thread.sleep(2000);
	wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectStatutoryDropdown()));
	Select status = new Select(OverduePOM.selectStatutoryDropdown());	//Selecting Status dropdown box.
	status.selectByIndex(1);	
	 Thread.sleep(2000);
	 String workingDir = System.getProperty("user.dir");
  OverduePOM.PerformerDoc().sendKeys(workingDir+"//Reports//LicenseCompanyadmin(Statutory).html");	//uploading new file	
  Thread.sleep(2000);
  js1.executeScript("window.scrollBy(0,1000)");
  Thread.sleep(2000);
	LiPerformerPOM.PerformDateclick().click();
	Thread.sleep(1000);	
	LiPerformerPOM.Priviouscalnder().click();
	Thread.sleep(1000);
	LiPerformerPOM.PerformDate().click();
	Thread.sleep(5000);
	js1.executeScript("window.scrollBy(0,100)");

	//LiPerformerPOM.clickCheckbox.click();			//Clicking on checkbox of Penalty values
	//js1.executeScript("window.scrollBy(0,300)");

Thread.sleep(500);
js1.executeScript("window.scrollBy(0,700)");
Thread.sleep(300);
OverduePOM.clickComplianceSubmit().click();			//Clicking on 'Submit' button.

Thread.sleep(1000);
js1.executeScript("window.scrollBy(1000,0)");				//Scrolling down window by 2000 px.

Thread.sleep(300);
if(type.equalsIgnoreCase("Statutory"))
{
	
	
	Thread.sleep(500);
	js1.executeScript("window.scrollBy(2000,0)");	//Scrolling up window by 2000 px.
	test.log(LogStatus.PASS, "Save Sucessfully.");
}
else
	{
	test.log(LogStatus.PASS, "Save Sucessfully.");
	 }
	getDriver().switchTo().parentFrame();
	
	Thread.sleep(700);
	LiPerformerPOM.clickClose().click();				//Clicking on Close (Cross)
	getDriver().navigate().refresh();
	MethodPOM.clickMyDashboard().click();
			  }
			  else
			  {
				    
					test.log(LogStatus.PASS,"No Record Found");
					MethodPOM.clickMyDashboard().click();
			  }
	
	wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpiring()));
	String Expiring1=MethodPOM.clickExpiring().getText();
	
     int Expiringlicense1 = Integer.parseInt(Expiring1);	//Reading Active count.

     wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.PFRCount()));
     String pfr1=LiPerformerPOM.PFRCount().getText();
     int pfrlicense1 = Integer.parseInt(pfr1);	//Reading PendingForReview count.
     
     if(Expiringlicense>Expiringlicense1&&pfrlicense<pfrlicense1)
     {
    	 test.log(LogStatus.PASS, "Expiring Old Count = "+Expiringlicense+" | New Count = "+Expiringlicense1);
         test.log(LogStatus.PASS, "Pendingforreview Old Count = "+pfrlicense+" | New Count = "+pfrlicense1);
     }
     else
     {
    	 test.log(LogStatus.FAIL, "Expiring Old Count = "+Expiringlicense+" | New Count = "+Expiringlicense1);
         test.log(LogStatus.FAIL, "Pendingforreview Old Count = "+pfrlicense+" | New Count = "+pfrlicense1);
     }
     
	}
	public static void internalExpiringlicenseperform( ExtentTest test, String type) throws InterruptedException
	{
		WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
		LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
		
		
		Select drp = new Select(LiPerformerPOM.clickType());
		drp.selectByIndex(1);
		CFOcountPOM.clickApply1().click();	
		  Thread.sleep(3000);
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpiring()));
		String Expiring=MethodPOM.clickExpiring().getText();
		
	     int Expiringlicense = Integer.parseInt(Expiring);	//Reading Active count.
	     
	     wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.PFRCount()));
	     String pfr=LiPerformerPOM.PFRCount().getText();
	     int pfrlicense = Integer.parseInt(pfr);	//Reading PendingForReview count.

	      MethodPOM.clickExpiring().click();					//Clicking on 'Expiring' image
	      Thread.sleep(4000);
	        JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
			js1.executeScript("window.scroll(0,500)");
			Thread.sleep(4000);
			
		/*	MethodPOM.clickReadActive.click();					//Clicking on total items count
			Thread.sleep(500);
			String item = MethodPOM.clickReadActive.getText();	//Reading total items String value
			String[] bits = item.split(" ");								//Splitting the String
			String LicenseActiveCount = bits[bits.length - 2];		//Getting the second last word (total)
			int total = Integer.parseInt(LicenseActiveCount);
			
			if(Activelicense == total)
	{
		//test.log(LogStatus.PASS, "Dashboard 'Expired' count matches to the total records displayed in grid.");
		test.log(LogStatus.PASS, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
	}
	else
	{
		//test.log(LogStatus.FAIL, "Dashboard 'Expired' count doesn't matches to the total records displayed in grid.");
		test.log(LogStatus.FAIL, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
	}
	*/
	   
    Thread.sleep(3000);
    OverduePOM.ActiveAction().click();	
	                                          //Selecting 2nd value from dropdown.//Selecting 2nd value from dropdown.
    wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("ContentPlaceHolder1_showReminderDetail"));	
	js1.executeScript("window.scrollBy(0,1000)");
   Thread.sleep(2000);
	wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectInternalDropdown()));
	Select status = new Select(OverduePOM.selectInternalDropdown());	//Selecting Status dropdown box.
	status.selectByIndex(1);	
	
	Thread.sleep(5000);
	js1.executeScript("window.scrollBy(0,100)");
	 String workingDir = System.getProperty("user.dir");
		OverduePOM.fileUploadInternal().sendKeys(workingDir+"//TestData//ComplianceSheet.xlsx");	//Uploading file by sending file to Upload Button. (Internal)
		Thread.sleep(1000);
		js1.executeScript("window.scrollBy(0,1000)");
		Thread.sleep(500);
	 LiPerformerPOM.indate().sendKeys("01-08-2023");
	Thread.sleep(5000);
	 LiPerformerPOM.justclick().click();
	//LiPerformerPOM.clickCheckbox.click();			//Clicking on checkbox of Penalty values
	//js1.executeScript("window.scrollBy(0,300)");

	
Thread.sleep(500);
js1.executeScript("window.scrollBy(0,700)");
Thread.sleep(300);
OverduePOM.clickComplianceSubmit().click();			//Clicking on 'Submit' button.

Thread.sleep(1000);
js1.executeScript("window.scrollBy(0,-3000)");				//Scrolling down window by 2000 px.
Thread.sleep(3000);

String msg = LiPerformerPOM.inlablemsg().getText();	
if(msg.equalsIgnoreCase("Saved Successfully."))
{
	test.log(LogStatus.PASS, "Message displayed = "+msg);
	
}
	else
	{
		test.log(LogStatus.FAIL, "Message displayed = "+msg);
	}
	getDriver().switchTo().parentFrame();
	
	Thread.sleep(700);
	LiPerformerPOM.clickClose().click();				//Clicking on Close (Cross)
	getDriver().navigate().refresh();
	MethodPOM.clickMyDashboard().click();
	
	wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
	LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
	
	
	Select drp1 = new Select(LiPerformerPOM.clickType());
	Thread.sleep(7000);
	drp1.selectByIndex(1);
	CFOcountPOM.clickApply1().click();	
	  Thread.sleep(3000);
	
	wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpiring()));
	String Expiring1=MethodPOM.clickExpiring().getText();
	
     int Expiringlicense1 = Integer.parseInt(Expiring1);	//Reading Active count.

     wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.PFRCount()));
     String pfr1=LiPerformerPOM.PFRCount().getText();
     int pfrlicense1 = Integer.parseInt(pfr1);	//Reading PendingForReview count.
     
     if(Expiringlicense>Expiringlicense1&&pfrlicense<pfrlicense1)
     {
    	 test.log(LogStatus.PASS, "Expiring Old Count = "+Expiringlicense+" | New Count = "+Expiringlicense1);
         test.log(LogStatus.PASS, "Pendingforreview Old Count = "+pfrlicense+" | New Count = "+pfrlicense1);
     }
     else
     {
    	 test.log(LogStatus.FAIL, "Expiring Old Count = "+Expiringlicense+" | New Count = "+Expiringlicense1);
         test.log(LogStatus.FAIL, "Pendingforreview Old Count = "+pfrlicense+" | New Count = "+pfrlicense1);
     }
     
	}
	
	public static void Expiredlicenseperform( ExtentTest test, String type) throws InterruptedException, AWTException
	{
		WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpired()));
		String Expired=MethodPOM.clickExpired().getText();
		
	     int Expiredlicense = Integer.parseInt(Expired);	//Reading Expired count.
	     
	     wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.PFRCount()));
	     String pfr=LiPerformerPOM.PFRCount().getText();
	     int pfrlicense = Integer.parseInt(pfr);	//Reading PendingForReview count.

	      MethodPOM.clickExpired().click();					//Clicking on 'Expiring' image
	      Thread.sleep(4000);
	        JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
			js1.executeScript("window.scroll(0,500)");
			Thread.sleep(4000);
			
		/*	MethodPOM.clickReadActive.click();					//Clicking on total items count
			Thread.sleep(500);
			String item = MethodPOM.clickReadActive.getText();	//Reading total items String value
			String[] bits = item.split(" ");								//Splitting the String
			String LicenseActiveCount = bits[bits.length - 2];		//Getting the second last word (total)
			int total = Integer.parseInt(LicenseActiveCount);
			
			if(Activelicense == total)
	{
		//test.log(LogStatus.PASS, "Dashboard 'Expired' count matches to the total records displayed in grid.");
		test.log(LogStatus.PASS, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
	}
	else
	{
		//test.log(LogStatus.FAIL, "Dashboard 'Expired' count doesn't matches to the total records displayed in grid.");
		test.log(LogStatus.FAIL, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
	}
	*/
	   
    Thread.sleep(3000);
    OverduePOM.ActiveAction().click();	
	                                          //Selecting 2nd value from dropdown.//Selecting 2nd value from dropdown.
	wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(LiPerformerPOM.ShowFream()));		
	js1.executeScript("window.scrollBy(0,1000)");
   Thread.sleep(2000);
	wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectStatutoryDropdown()));
	Select status = new Select(OverduePOM.selectStatutoryDropdown());	//Selecting Status dropdown box.
	status.selectByIndex(1);	
	 Thread.sleep(2000);
	 String workingDir = System.getProperty("user.dir");
 OverduePOM.PerformerDoc().sendKeys(workingDir+"//TestData//ComplianceSheet.xlsx");	//uploading new file	
 Thread.sleep(2000);
 js1.executeScript("window.scrollBy(0,1000)");
 Thread.sleep(2000);
	LiPerformerPOM.PerformDateclick().click();
	Thread.sleep(1000);
	LiPerformerPOM.Priviouscalnder().click();
	Thread.sleep(1000);
	LiPerformerPOM.PerformDate().click();
	Thread.sleep(5000);
	js1.executeScript("window.scrollBy(0,1000)");
Thread.sleep(3000);
OverduePOM.clickComplianceSubmit().click();			//Clicking on 'Submit' button.

Thread.sleep(3000);
js1.executeScript("window.scrollBy(0,-5000)");
String msg = LiPerformerPOM.lablemsg().getText();	
if(msg.equalsIgnoreCase("Saved Sucessfully."))
{
	test.log(LogStatus.PASS, "Message displayed = "+msg);
	
}
	else
	{
		test.log(LogStatus.PASS, "Message displayed = "+msg);
	}
/*if(type.equalsIgnoreCase("Statutory"))
{
	
	Thread.sleep(500);
	js1.executeScript("window.scrollBy(2000,0)");//Scrolling up window by 2000 px.
	test.log(LogStatus.PASS, "Save Successfully.");
}
else
	{
	test.log(LogStatus.FAIL, "Save Successfully.");
	 }*/
getDriver().switchTo().parentFrame();
	
	Thread.sleep(700);
	LiPerformerPOM.clickClose().click();				//Clicking on Close (Cross)
getDriver().navigate().refresh();
	MethodPOM.clickMyDashboard().click();
	
	
	wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpired()));
	String Expired1=MethodPOM.clickExpired().getText();
	
     int Expiredlicense1 = Integer.parseInt(Expired1);	//Reading Active count.

     wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.PFRCount()));
     String pfr1=LiPerformerPOM.PFRCount().getText();
     int pfrlicense1 = Integer.parseInt(pfr1);	//Reading PendingForReview count.
     
     if(Expiredlicense>Expiredlicense1&&pfrlicense<pfrlicense1)
     {
    	 test.log(LogStatus.PASS, "Expired Old Count = "+Expiredlicense+" | New Count = "+Expiredlicense1);
         test.log(LogStatus.PASS, "Pendingforreview Old Count = "+pfrlicense+" | New Count = "+pfrlicense1);
     }
     else
     {
    	 test.log(LogStatus.FAIL, "Expired Old Count = "+Expiredlicense+" | New Count = "+Expiredlicense1);
         test.log(LogStatus.FAIL, "Pendingforreview Old Count = "+pfrlicense+" | New Count = "+pfrlicense1);
     }
     
	}
	
	public static void InternalExpiredlicenseperform( ExtentTest test, String type) throws InterruptedException
	{
		WebDriverWait wait = new WebDriverWait(getDriver(), (30));
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
		LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
		
		
		Select drp = new Select(LiPerformerPOM.clickType());
		drp.selectByIndex(1);
		CFOcountPOM.clickApply1().click();	
		  Thread.sleep(3000);
		
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpired()));
		String Expired=MethodPOM.clickExpired().getText();
		
	     int Expiredlicense = Integer.parseInt(Expired);	//Reading Expired count.
	     
	     wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.PFRCount()));
	     String pfr=LiPerformerPOM.PFRCount().getText();
	     int pfrlicense = Integer.parseInt(pfr);	//Reading PendingForReview count.

	      MethodPOM.clickExpired().click();					//Clicking on 'Expiring' image
	      Thread.sleep(4000);
	        JavascriptExecutor js1=(JavascriptExecutor)getDriver();
			js1.executeScript("window.scroll(0,500)");
			Thread.sleep(4000);
			
		/*	MethodPOM.clickReadActive.click();					//Clicking on total items count
			Thread.sleep(500);
			String item = MethodPOM.clickReadActive.getText();	//Reading total items String value
			String[] bits = item.split(" ");								//Splitting the String
			String LicenseActiveCount = bits[bits.length - 2];		//Getting the second last word (total)
			int total = Integer.parseInt(LicenseActiveCount);
			
			if(Activelicense == total)
	{
		//test.log(LogStatus.PASS, "Dashboard 'Expired' count matches to the total records displayed in grid.");
		test.log(LogStatus.PASS, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
	}
	else
	{
		//test.log(LogStatus.FAIL, "Dashboard 'Expired' count doesn't matches to the total records displayed in grid.");
		test.log(LogStatus.FAIL, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
	}
	*/
	   
    Thread.sleep(3000);
    OverduePOM.ActiveAction().click();	
	                                          //Selecting 2nd value from dropdown.//Selecting 2nd value from dropdown.
	wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("ContentPlaceHolder1_showReminderDetail"));		
	js1.executeScript("window.scrollBy(0,1000)");
   Thread.sleep(2000);
	wait.until(ExpectedConditions.visibilityOf(OverduePOM.selectInternalDropdown()));
	Select status = new Select(OverduePOM.selectInternalDropdown());	//Selecting Status dropdown box.
	status.selectByIndex(1);	
	
	 Thread.sleep(3000);
	 String workingDir = System.getProperty("user.dir");
		OverduePOM.fileUploadInternal().sendKeys(workingDir+"//TestData//ComplianceSheet.xlsx");	//Uploading file by sending file to Upload Button. (Internal)
		Thread.sleep(1000);
		js1.executeScript("window.scrollBy(0,1000)");
		Thread.sleep(500);
	 LiPerformerPOM.indate().sendKeys("01-08-2023");
	Thread.sleep(5000);
	 LiPerformerPOM.justclick().click();
	js1.executeScript("window.scrollBy(0,1000)");

	//LiPerformerPOM.clickCheckbox.click();			//Clicking on checkbox of Penalty values
	//js1.executeScript("window.scrollBy(0,300)");

Thread.sleep(500);
js1.executeScript("window.scrollBy(0,700)");
Thread.sleep(300);
OverduePOM.clickComplianceSubmit().click();			//Clicking on 'Submit' button.

Thread.sleep(1000);
js1.executeScript("window.scrollBy(0,-3000)");				//Scrolling down window by 2000 px.

Thread.sleep(300);
String msg = LiPerformerPOM.inlablemsg().getText();	
if(msg.equalsIgnoreCase("Saved Successfully."))
{
	test.log(LogStatus.PASS, "Message displayed = "+msg);
	
}
	else
	{
		test.log(LogStatus.FAIL, "Message displayed = "+msg);
	}
/*if(type.equalsIgnoreCase("Statutory"))
{
	
	Thread.sleep(500);
	js1.executeScript("window.scrollBy(2000,0)");	//Scrolling up window by 2000 px.
}
else
	{
	test.log(LogStatus.PASS, "Save Sucessfully.");
	 }
	 */
getDriver().switchTo().parentFrame();
	
	Thread.sleep(700);
	LiPerformerPOM.clickClose().click();				//Clicking on Close (Cross)
	getDriver().navigate().refresh();
	MethodPOM.clickMyDashboard().click();
	
	wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
	LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
	
	
	Select drp1 = new Select(LiPerformerPOM.clickType());
	Thread.sleep(7000);
	drp1.selectByIndex(1);
	CFOcountPOM.clickApply1().click();	
	  Thread.sleep(3000);
	
	wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpired()));
	String Expired1=MethodPOM.clickExpired().getText();
	
     int Expiredlicense1 = Integer.parseInt(Expired1);	//Reading Active count.

     wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.PFRCount()));
     String pfr1=LiPerformerPOM.PFRCount().getText();
     int pfrlicense1 = Integer.parseInt(pfr1);	//Reading PendingForReview count.
     
     if(Expiredlicense>Expiredlicense1&&pfrlicense<pfrlicense1)
     {
    	 test.log(LogStatus.PASS, "Expired Old Count = "+Expiredlicense+" | New Count = "+Expiredlicense1);
         test.log(LogStatus.PASS, "Pendingforreview Old Count = "+pfrlicense+" | New Count = "+pfrlicense1);
     }
     else
     {
    	 test.log(LogStatus.FAIL, "Expired Old Count = "+Expiredlicense+" | New Count = "+Expiredlicense1);
         test.log(LogStatus.FAIL, "Pendingforreview Old Count = "+pfrlicense+" | New Count = "+pfrlicense1);
     }
     
	}
	
	public static  void AssignedButNotActivated( ExtentTest test, String type) throws InterruptedException, IOException
	{		                                   
		WebDriverWait wait = new WebDriverWait(getDriver(), (30));
		
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.AssignedButNotActivated()));
		String AssognedButNotActivated=LiPerformerPOM.AssignedButNotActivated().getText();
		
	     int NotActivated = Integer.parseInt(AssognedButNotActivated);	//Reading Active count.

	     LiPerformerPOM.AssignedButNotActivated().click();					//Clicking on 'Active' image
	      Thread.sleep(5000);
	        JavascriptExecutor js1=(JavascriptExecutor) getDriver() ;
			js1.executeScript("window.scroll(0,500)");
			Thread.sleep(5000);
			MethodPOM.clickReadActive().click();	
			String ite = MethodPOM.clickReadExpired().getText();	//Reading total items String value
			Thread.sleep(5000);
			if(!ite.equalsIgnoreCase("No items to display"))	
			{
		//	MethodPOM.clickReadActive.click();					//Clicking on total items count
			//Thread.sleep(500);
		//	String item1 = MethodPOM.clickReadActive.getText();	//Reading total items String value
			String[] bits = ite.split(" ");								//Splitting the String
			String LicenseActiveCount = bits[bits.length - 2];		//Getting the second last word (total number of users)
			int total = Integer.parseInt(LicenseActiveCount);
			if(NotActivated == total)
				{
				//	test.log(LogStatus.PASS, "Number of Active License  grid matches to Dashboard Active License   Count.");
					test.log(LogStatus.PASS, "No of Assigned But Not Activated License  in the grid = "+total+" | Dashboard Assigned But Not Activated License  Count = "+NotActivated);
				}
				else
				{
					//test.log(LogStatus.FAIL, "Number of Active License does not matches to Dashboard Active License   Count.");
					test.log(LogStatus.FAIL, "No of Assigned But Not Activated License  in the grid = "+total+" | Dashboard Assigned But Not Activated License  Count = "+NotActivated);
				}
			Thread.sleep(5000);
			
			LiPerformerPOM.NotActivatedExport().click();
			
			JavascriptExecutor js = (JavascriptExecutor) getDriver();
		
			
			Thread.sleep(3000);
			
			
			progress();
			
		/*	int flag = 0;
			try
			{
				wait.until(ExpectedConditions.visibilityOf(LiReviewerPOM.checkTable1));	//Waiting until records table gets visible.
				flag = 1;
			}
			catch(Exception e)
			{
				
			}
			
			if(flag == 1)
			{
				js.executeScript("window.scrollBy(0,2000)");				//Scrolling down window by 2000 px.
				
				  Thread.sleep(10000);
				/*	CFOcountPOM.readTotalItems1.click();
					
					String item = CFOcountPOM.readTotalItems1.getText();
					//String NoRecord = LiReviewerPOM.reNorecord.getText();
					 if(!item.equalsIgnoreCase("No items to display")) 
					 {
					 
					//String[] bits1 = ite.split(" ");								//Splitting the String
					String compliancesCount1 = bits1[bits1.length - 2];				//Getting the second last word (total number of users)
					int count2 = Integer.parseInt(compliancesCount1);
					String NoRecord = LiReviewerPOM.reNorecord.getText();
					   if(!NoRecord.equalsIgnoreCase("No items to display")) 
					 {
						   try
							{
								performerPOM.clickExcelReport.sendKeys(Keys.PAGE_DOWN);
							}
							catch(Exception e)
							{
								
							}
							js.executeScript("window.scrollBy(0,1000)");
							
						*/
							Thread.sleep(100);
							File dir = new File("C://Users//deepalid//Downloads");
							File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
							
							Thread.sleep(500);
							CFOcountPOM.clickNextPage1().sendKeys(Keys.PAGE_UP);
							Thread.sleep(250);
							LiPerformerPOM.NotActivatedExport().click();				//Clicking on 'Excel Report' image.
							
							
							Thread.sleep(500);
							File dir1 = new File("C://Users//deepalid//Downloads");
							File[] allFilesNew = dir1.listFiles();							//Counting number of files in directory after download
							
							if(dirContents.length < allFilesNew.length)
							{
								test.log(LogStatus.PASS, "File downloaded successfully.");
								
								File lastModifiedFile = allFilesNew[1];			//Storing any 0th index file in 'lastModifiedFile' file name.
							    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
							    {
							       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified()) 	//If allFilesNew[i] file is having large/latest time time of update then latest modified file be allFilesNew[i] file.
							       {
							           lastModifiedFile = allFilesNew[i];
							       }
							    }
								
								Thread.sleep(100);
								fis = new FileInputStream(lastModifiedFile);
								workbook = new XSSFWorkbook(fis);
								sheet = workbook.getSheetAt(0);					//Retrieving first sheet of Workbook
								
								int no = sheet.getLastRowNum();
								Row row = sheet.getRow(no);
								Cell c1 = row.getCell(0);
								int records =(int) c1.getNumericCellValue();
								fis.close();
								
								if(NotActivated == records)
								{
									//test.log(LogStatus.PASS, "Notice=No of records from grid matches to no of records in Excel Sheet.");
									test.log(LogStatus.PASS, "For "+type+" status total records from Grid = "+total+" | Total records from Report = "+records);
								}
								else
								{
									//test.log(LogStatus.FAIL, "Notice=No of records from grid doesn't matches to no of records in Excel Sheet.");
									test.log(LogStatus.FAIL, "For "+type+" status total records from Grid = "+total+" | Total records from Excel Sheet = "+records);
								}
							}
							else
							{
								test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
							}
			}
						else
							{
								test.log(LogStatus.PASS, "No Record Found");
							}
			
	
			MethodPOM.clickMyDashboard().click();
			
			Thread.sleep(500);
			LiPerformerPOM.AssignedButNotActivated().click();
			if(type.equalsIgnoreCase("Internal"))
			{
				WebDriverWait wait1 = new WebDriverWait( getDriver(), (30));
					wait1.until(ExpectedConditions.visibilityOf(licmgmtPOM.Type2()));
					licmgmtPOM.Type2().click();				//Clicking on 'Type' drop down.
					
					licmgmtPOM.internalType2().click();

			Thread.sleep(500);
	   LiPerformerPOM.EntityLocation().click();
	//Thread.sleep(5000);
	/*LiPerformerPOM.EntityLocationExpand().click();
	Thread.sleep(500);
	//LiPerformerPOM.EntityLocationExpand.click();
	//Thread.sleep(500);
   Thread.sleep(500);
   LiPerformerPOM.Entitysubexpand().click();
   Thread.sleep(500);
   String locationtext1 =LiPerformerPOM.checkloc().getText();
   LiPerformerPOM.checkloc().click();
   Thread.sleep(3000);
   //LiPerformerPOM.ClickLictype.click();
  // Thread.sleep(7000);
  // String LicenseType1 =LiPerformerPOM.notactivatefilterin.getText();
   Thread.sleep(7000);
  // LiPerformerPOM.notactivatefilterin.click();
   Thread.sleep(5000);
 
    List<String> li=new ArrayList<String>();
    
    li.add(locationtext1);
    //li.add(LicenseType1);
 
    Thread.sleep(3000);
    
	List<String> filter=new ArrayList<String>();	
	filter.add("Location");
//	filter.add("LicenseType");	
	
	JavascriptExecutor js = (JavascriptExecutor) getDriver();
	js.executeScript("window.scrollBy(0,150)");	
	Thread.sleep(3000);

	CFOcountPOM.readTotalItems1().click();					//Clicking on Text of total items just to scroll down.
	String s = CFOcountPOM.readTotalItems1().getText();
	Thread.sleep(2000);

	if(!s.equalsIgnoreCase("No items to display")) 
	{
	Thread.sleep(5000);

	List<WebElement> entitycol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[2]"));
	
	//List<WebElement> liccol=driver.findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[6]"));
	//List<WebElement> Actcol=driver.findElements(By.xpath("//*[@id='grid']/div[3]/table/tbody/tr/td[2]"));
	Thread.sleep(2000);

	for(int i=0; i<li.size(); i++){
		
		List<String> text= new ArrayList<String>();
		HashSet<String> pass=new LinkedHashSet<>();
		HashSet<String> fail=new LinkedHashSet<>();
		List<WebElement> raw=new ArrayList<WebElement>();

			if(i==0)
			{
				raw.addAll(entitycol);
			}
		/*else if(i==1)
			{
				raw.addAll(liccol);
			}
		
			
		for(int k=0;k<raw.size();k++)
			{
				text.add(raw.get(k).getText());
			}

			for(int l=0;l<text.size();l++)
				{
			if(text.get(l).equals(li.get(i)))
				{
					pass.add(text.get(l));	
					System.out.println("pass : "+text.get(l)+" : "+li.get(i));

				}
			else
			{
				fail.add(text.get(l));		
				System.out.println("fail : "+text.get(l)+" : "+li.get(i));
				System.out.println(i);

			}
			 }
	 
for(String Fal : fail)
	 {
			test.log(LogStatus.FAIL, filter.get(i)+" column shows incorrect value : "+Fal);
	 }	
	 for(String Pas : pass)
	 {
		 test.log(LogStatus.PASS,  filter.get(i)+" dropdown working properly.");
		//	test.log(LogStatus.PASS, filter.get(i)+" displayed : "+Pas);	
			System.out.println(filter.get(i)+" : "+Pas);
 }
	 text.clear();
	pass.clear();
	fail.clear();
	raw.clear();
	
	
	}
	
*/
		   }
		   else
		   {
				test.log(LogStatus.PASS,"Selected Location and License Type No Record Found");
		   }
	
	Boolean  btnclear =LiPerformerPOM.clearbtn().isEnabled();
     if(btnclear) 
     {
    	 LiPerformerPOM.clearbtn().click();
    	 test.log(LogStatus.PASS,"Clear Button Working Successfully");
     }
     else
     {
    	 test.log(LogStatus.FAIL,"Clear Button Not Clickable");
     }
	

	  wait.until(ExpectedConditions.elementToBeClickable(MethodPOM.clickMyDashboard()));
		
	}

			/*else
			{			Thread.sleep(500);
			
			
				 LiPerformerPOM.EntityLocation().click();
					Thread.sleep(500);
					LiPerformerPOM.aa().click();
					Thread.sleep(500);
			   Thread.sleep(500);
			   String locationtext1 =LiPerformerPOM.checkloc().getText();
			   LiPerformerPOM.checkloc().click();
			   Thread.sleep(3000);
			   LiPerformerPOM.ClickLictype().click();
			   Thread.sleep(5000);
			   String LicenseType1 =LiPerformerPOM.notactivatefilter().getText();
			   Thread.sleep(5000);
			   LiPerformerPOM.notactivatefilter().click();
			   Thread.sleep(5000);
			 
			    List<String> li=new ArrayList<String>();
			    
			    li.add(locationtext1);
			    li.add(LicenseType1);
			 
			    Thread.sleep(3000);
			    
				List<String> filter=new ArrayList<String>();	
				filter.add("Location");
				filter.add("LicenseType");	
				
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("window.scrollBy(0,150)");	
				Thread.sleep(3000);

				CFOcountPOM.readTotalItems1().click();					//Clicking on Text of total items just to scroll down.
				String s = CFOcountPOM.readTotalItems1().getText();
				Thread.sleep(2000);

				if(!s.equalsIgnoreCase("No items to display")) 
				{
				Thread.sleep(5000);

				List<WebElement> entitycol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[2]"));
				
				List<WebElement> liccol=getDriver().findElements(By.xpath("//*[@id='grid']/div[2]/table/tbody/tr/td[6]"));
				//List<WebElement> Actcol=driver.findElements(By.xpath("//*[@id='grid']/div[3]/table/tbody/tr/td[2]"));
				Thread.sleep(2000);

				for(int i=0; i<li.size(); i++){
					
					List<String> text= new ArrayList<String>();
					HashSet<String> pass=new LinkedHashSet<>();
					HashSet<String> fail=new LinkedHashSet<>();
					List<WebElement> raw=new ArrayList<WebElement>();

						if(i==0)
						{
							raw.addAll(entitycol);
						}
					else if(i==1)
						{
							raw.addAll(liccol);
						}
					
						
					for(int k=0;k<raw.size();k++)
						{
							text.add(raw.get(k).getText());
						}

						for(int l=0;l<text.size();l++)
							{
						if(text.get(l).equals(li.get(i)))
							{
								pass.add(text.get(l));	
								System.out.println("pass : "+text.get(l)+" : "+li.get(i));

							}
						else
						{
							fail.add(text.get(l));		
							System.out.println("fail : "+text.get(l)+" : "+li.get(i));
							System.out.println(i);

						}
						 }
				 
			for(String Fal : fail)
				 {
						test.log(LogStatus.FAIL, filter.get(i)+" column shows incorrect value : "+Fal);
				 }	
				 for(String Pas : pass)
				 {
					 test.log(LogStatus.PASS,  filter.get(i)+" dropdown working properly.");
					//	test.log(LogStatus.PASS, filter.get(i)+" displayed : "+Pas);	
						System.out.println(filter.get(i)+" : "+Pas);
			 }
				 text.clear();
				pass.clear();
				fail.clear();
				raw.clear();
				
				
				}
				

					   }
					   else
					   {
							test.log(LogStatus.PASS,"Selected Location and License Type No Record Found");
					   }
				
				Boolean  btnclear =LiPerformerPOM.clearbtn().isEnabled();
			     if(btnclear) 
			     {
			    	 LiPerformerPOM.clearbtn().click();
			    	 test.log(LogStatus.PASS,"Clear Button Working Successfully");
			     }
			     else
			     {
			    	 test.log(LogStatus.FAIL,"Clear Button Not Clickable");
			     }
				
				
				  wait.until(ExpectedConditions.elementToBeClickable(MethodPOM.clickMyDashboard()));
					
				}
				*/
				
			

   public static void selectOptionFromDropDown_bs(List<WebElement> options, String value) 
{
	
	for(WebElement option:options) {
		if(option.getText().equals(value)) {
			option.click();
			break;
		}
	}
}
   public static void PerformerDashboardActivefilter (ExtentTest test, String type) throws InterruptedException, IOException
{	
	WebDriverWait wait = new WebDriverWait( getDriver(), 20);
	   MethodPOM.DashboardEntityclick().click();
	   Thread.sleep(5000);
	   MethodPOM.Entitypluseclick().click();
	   Thread.sleep(5000);
	   MethodPOM.Dashselectloc().click(); 
		getDriver().manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		   Thread.sleep(3000);
		   MethodPOM.clickDashlictype().click();
		   Thread.sleep(5000);
		   MethodPOM.Performerserachlic11().sendKeys("Shops & Establishment",Keys.ENTER);
		   Thread.sleep(5000);
			   LicenseCompanyadmin.MethodPOM.ClickApply().click();
	   
	WebDriverWait wait1 = new WebDriverWait( getDriver(), 20);
	
	wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickActive()));
	String active=MethodPOM.clickActive().getText();
	
     int activelicense = Integer.parseInt(active);	//Reading Active count.

      MethodPOM.clickActive().click();					//Clicking on 'Active' image
      Thread.sleep(5000);
        JavascriptExecutor js1=(JavascriptExecutor)  getDriver() ;
		js1.executeScript("window.scroll(0,500)");
		Thread.sleep(5000);
		
		MethodPOM.clickReadActive().click();					//Clicking on total items count
		Thread.sleep(500);
		String item = MethodPOM.clickReadActive().getText();	//Reading total items String value
		String[] bits = item.split(" ");								//Splitting the String
		String LicenseActiveCount = bits[bits.length - 2];		//Getting the second last word (total number of users)
		int total = Integer.parseInt(LicenseActiveCount);
		if(activelicense == total)
			{
			//	test.log(LogStatus.PASS, "Number of Active License  grid matches to Dashboard Active License   Count.");
				test.log(LogStatus.PASS, "No of Active License  in the grid = "+total+" | Dashboard Active License  Count = "+activelicense);
			}
			else
			{
				//test.log(LogStatus.FAIL, "Number of Active License does not matches to Dashboard Active License   Count.");
				test.log(LogStatus.FAIL, "No of Active License  in the grid = "+total+" | Dashboard Active License  Count = "+activelicense);
			}
						
}  
   public static void PerformerDashboardExpiringfilter (ExtentTest test, String type) throws InterruptedException, IOException                                          
{	                                                                                                                                                        
  	WebDriverWait wait = new WebDriverWait( getDriver(), 20);                                                                                                
  	   MethodPOM.DashboardEntityclick().click();                                                                                                             
  	   Thread.sleep(5000);                                                                                                                                   
  	   MethodPOM.Entitypluseclick().click();                                                                                                                 
  	   Thread.sleep(5000);                                                                                                                                   
  	   MethodPOM.Dashselectloc().click();                                                                                                                    
  		getDriver().manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);                                                                                   
  		   Thread.sleep(3000);                                                                                                                                  
  		   MethodPOM.clickDashlictype().click();                                                                                                                
  		   Thread.sleep(5000);                                                                                                                                  
  		   MethodPOM.Performerserachlic11().sendKeys("Shops & Establishment",Keys.ENTER);                                                                                 
  		   Thread.sleep(5000);                                                                                                                                  
  			   LicenseCompanyadmin.MethodPOM.ClickApply().click();                                                                                                 
  	                                                                                                                                                         
 
    wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpiring()));                                                                              
    String Expiring=MethodPOM.clickExpiring().getText();                                                                                                 
                                                                                                                                                         
     int Expiringlicense = Integer.parseInt(Expiring);	//Reading Active count.                                                                           
                                                                                                                                                         
      MethodPOM.clickExpiring().click();					//Clicking on 'Expiring' image                                                                              
      Thread.sleep(4000);                                                                                                                                
        JavascriptExecutor js1=(JavascriptExecutor)  getDriver() ;                                                                                       
    	js1.executeScript("window.scroll(0,500)");                                                                                                          
    	Thread.sleep(4000);                                                                                                                                 
    	                                                                                                                                                    
    	MethodPOM.clickReadExpiring().click();					//Clicking on total items count                                                                          
    	Thread.sleep(500);                                                                                                                                  
    	String item = MethodPOM.clickReadExpiring().getText();	//Reading total items String value                                                           
    	String[] bits = item.split(" ");								//Splitting the String                                                                                      
    	String LicenseExpiringCount = bits[bits.length - 2];		//Getting the second last word (total number of users)                                        
    	                                                                                                                                                    
    	//int total = Integer.parseInt(MethodPOM.clickReadActive().getText());                                                                              
    	int total = Integer.parseInt(LicenseExpiringCount);                                                                                                 
    	if(Expiringlicense == total)                                                                                                                        
    		{                                                                                                                                                  
    			//test.log(LogStatus.PASS, "Number of Expiring License  grid matches to Dashboard Expiring  License   Count.");                                   
    			test.log(LogStatus.PASS, "No of Expiring  License  in the grid = "+total+" | Dashboard Expiring License  Count = "+Expiringlicense);              
    		}                                                                                                                                                  
    		else                                                                                                                                               
    		{                                                                                                                                                  
    			//test.log(LogStatus.FAIL, "Number of Expiring License does not matches to Dashboard Expiring License   Count.");                                 
    			test.log(LogStatus.FAIL, "No of Expiring License  in the grid = "+total+" | Dashboard Expiring License  Count = "+Expiringlicense);               
    		}                                                                                                                                                  
	                                                                                                                            
  }  
   public static void PerformerDashboardExpiredfilter (ExtentTest test, String type) throws InterruptedException, IOException                                          
{	                                                                                                                                                        
  	WebDriverWait wait = new WebDriverWait( getDriver(), 20);                                                                                                
  	   MethodPOM.DashboardEntityclick().click();                                                                                                             
  	   Thread.sleep(5000);                                                                                                                                   
  	   MethodPOM.Entitypluseclick().click();                                                                                                                 
  	   Thread.sleep(5000);                                                                                                                                   
  	   MethodPOM.Dashselectloc().click();                                                                                                                    
  		getDriver().manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);                                                                                   
  		   Thread.sleep(3000);                                                                                                                                  
  		   MethodPOM.clickDashlictype().click();                                                                                                                
  		   Thread.sleep(5000);                                                                                                                                  
  		   MethodPOM.Performerserachlic11().sendKeys("Shops & Establishment",Keys.ENTER);                                                                                 
  		   Thread.sleep(5000);                                                                                                                                  
  			   LicenseCompanyadmin.MethodPOM.ClickApply().click();                                                                                                 
  	                                                                                                                                                         
  			 wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickExpired()));
  			String Expired=MethodPOM.clickExpired().getText();
  			
  		     int Expiredlicense = Integer.parseInt(Expired);	//Reading Expired count.

  		      MethodPOM.clickExpired().click();					//Clicking on 'Expired' image
  		      Thread.sleep(4000);
  		        JavascriptExecutor js1=(JavascriptExecutor)  getDriver() ;
  				js1.executeScript("window.scroll(0,500)");
  				Thread.sleep(4000);
  				
  				MethodPOM.clickReadExpired().click();					//Clicking on total items count
  				Thread.sleep(500);
  				String item = MethodPOM.clickReadExpired().getText();	//Reading total items String value
  				String[] bits = item.split(" ");								//Splitting the String
  				String LicenseExpiredCount = bits[bits.length - 2];		//Getting the second last word (total number of users)
  				
  				//int total = Integer.parseInt(MethodPOM.clickReadActive().getText());
  				int total = Integer.parseInt(LicenseExpiredCount);
  				if(Expiredlicense == total)
  					{
  						//test.log(LogStatus.PASS, "Number of Expired License  grid matches to Dashboard Expired  License   Count.");
  						test.log(LogStatus.PASS, "No of Expired  License  in the grid = "+total+" | Dashboard Expired License  Count = "+Expiredlicense);
  					}
  					else
  					{
  						//test.log(LogStatus.FAIL, "Number of Expired License does not matches to Dashboard Expired License   Count.");
  						test.log(LogStatus.FAIL, "No of Expired License  in the grid = "+total+" | Dashboard Expired License  Count = "+Expiredlicense);
  					}
                                                                                                                         
	                                                                                                                            
  } 
   public static void PerformerDashboardAppliedfilter (ExtentTest test, String type) throws InterruptedException, IOException                                          
{	                                                                                                                                                        
  	WebDriverWait wait = new WebDriverWait( getDriver(), 20);                                                                                                
  	   MethodPOM.DashboardEntityclick().click();                                                                                                             
  	   Thread.sleep(5000);                                                                                                                                   
  	   MethodPOM.Entitypluseclick().click();                                                                                                                 
  	   Thread.sleep(5000);                                                                                                                                   
  	   MethodPOM.Dashselectloc().click();                                                                                                                    
  		getDriver().manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);                                                                                   
  		   Thread.sleep(3000);                                                                                                                                  
  		   MethodPOM.clickDashlictype().click();                                                                                                                
  		   Thread.sleep(5000);                                                                                                                                  
  		   MethodPOM.Performerserachlic11().sendKeys("Shops & Establishment",Keys.ENTER);                                                                                 
  		   Thread.sleep(5000);                                                                                                                                  
  			   LicenseCompanyadmin.MethodPOM.ClickApply().click();                                                                                                 
  	                                                                                                                                                         
  				wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickApplied()));
  				String Applied=MethodPOM.clickApplied().getText();
  				
  			     int Appliedlicense = Integer.parseInt(Applied);	//Reading Applied count.

  			      MethodPOM.clickApplied().click();					//Clicking on 'Applied' image
  			      Thread.sleep(4000);
  			        JavascriptExecutor js1=(JavascriptExecutor)  getDriver() ;
  					js1.executeScript("window.scroll(0,500)");
  					Thread.sleep(4000);
  					
  					MethodPOM.clickReadApplied().click();					//Clicking on total items count
  					Thread.sleep(500);
  					String item = MethodPOM.clickReadApplied().getText();	//Reading total items String value
  					String[] bits = item.split(" ");								//Splitting the String
  					String LicenseAppliedCount = bits[bits.length - 2];		//Getting the second last word (total number of users)
  					
  					//int total = Integer.parseInt(MethodPOM.clickReadActive().getText());
  					int total = Integer.parseInt(LicenseAppliedCount);
  					if(Appliedlicense == total)
  						{
  							//test.log(LogStatus.PASS, "Number of Applied License  grid matches to Dashboard Applied  License   Count.");
  							test.log(LogStatus.PASS, "No of Applied  License  in the grid = "+total+" | Dashboard Applied License  Count = "+Appliedlicense);
  						}
  						else
  						{
  							//test.log(LogStatus.FAIL, "Number of Applied License does not matches to Dashboard Applied License   Count.");
  							test.log(LogStatus.FAIL, "No of Applied License  in the grid = "+total+" | Dashboard Applied License  Count = "+Appliedlicense);
  						}
                                                                                                                         
	                                                                                                                            
  }  
   public static void PerformerDashboardpendingforreviewfilter( ExtentTest test, String type) throws InterruptedException, IOException
{
	WebDriverWait wait = new WebDriverWait( getDriver(), 20);                                                                                                
	   MethodPOM.DashboardEntityclick().click();                                                                                                             
	   Thread.sleep(5000);                                                                                                                                   
	   MethodPOM.Entitypluseclick().click();                                                                                                                 
	   Thread.sleep(5000);                                                                                                                                   
	   MethodPOM.Dashselectloc().click();                                                                                                                    
		getDriver().manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);                                                                                   
		   Thread.sleep(3000);                                                                                                                                  
		   MethodPOM.clickDashlictype().click();                                                                                                                
		   Thread.sleep(5000);                                                                                                                                  
		   MethodPOM.Performerserachlic11().sendKeys("Shops & Establishment",Keys.ENTER);                                                                                 
		   Thread.sleep(5000);                                                                                                                                  
			   LicenseCompanyadmin.MethodPOM.ClickApply().click();                                                                                                 
	       
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickpendingforreview()));
		String PendingForReview=MethodPOM.clickpendingforreview().getText();
		
	     int pendingforreviewlicense = Integer.parseInt(PendingForReview);	//Reading Pending For Review count.

	      MethodPOM.clickpendingforreview().click();					//Clicking on 'Pending For Review ' image
	      Thread.sleep(4000);
	        JavascriptExecutor js1=(JavascriptExecutor)  getDriver() ;
			js1.executeScript("window.scroll(0,500)");
			Thread.sleep(4000);
			
			MethodPOM.clickReadpendingforreview().click();					//Clicking on total items count
			Thread.sleep(5000);
			String item = MethodPOM.clickReadpendingforreview().getText();	//Reading total items String value
			String[] bits = item.split(" ");								//Splitting the String
			String LicensependingforreviewCount = bits[bits.length - 2];		//Getting the second last word (total number of users)
			
			//int total = Integer.parseInt(MethodPOM.clickReadActive().getText());
			int total = Integer.parseInt(LicensependingforreviewCount);
			if(pendingforreviewlicense == total)
				{
				//	test.log(LogStatus.PASS, "Number of PendingForReview License  grid matches to Dashboard PendingForReview  License   Count.");
					test.log(LogStatus.PASS, "No of Pending For Review  License  in the grid = "+total+" | Dashboard Pending For Review License  Count = "+pendingforreviewlicense);
				}
				else
				{
					//test.log(LogStatus.FAIL, "Number of PendingForReview License does not matches to Dashboard PendingForReview License   Count.");
					test.log(LogStatus.FAIL, "No of Pending For Review License  in the grid = "+total+" | Dashboard Pending For Review License  Count = "+pendingforreviewlicense);
				}
											
}		
   public static void MyWorskpaceall( ExtentTest test, String type) throws InterruptedException
   {
	   licmgmtPOM.ClickMyWorkspace().click();

       WebDriverWait wait = new WebDriverWait( getDriver(), (30));
	   Thread.sleep(3000);
	   licmgmtPOM.Overviewworkspace().click();
       wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("APIOverView"));
       if(licmgmtPOM.Nomineetab().isDisplayed())
       {
      	 test.log(LogStatus.PASS,"License Nominee Details Displayed." );
       }
       else
       {
      	 test.log(LogStatus.FAIL,"License Nominee Details Not Displayed." );
       }
       Thread.sleep(7000);
         licmgmtPOM.CloseOverview().click();
	        Thread.sleep(7000);
       test.log(LogStatus.PASS,"License Overview Details Button Working Successfully " );
       licmgmtPOM.WorkspaceExport().click();
		 test.log(LogStatus.PASS,"License Details Export" );
		 Thread.sleep(3000);	
	   
   }
   public static void Dashallreportallcount( ExtentTest test, String type) throws InterruptedException
   {
	    WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		Thread.sleep(3000);
		 int ActiveCount=Integer.parseInt(MethodPOM.clickActive().getText());
		 int ExpiringCount=Integer.parseInt(MethodPOM.clickExpiring().getText());
		 int ExpiredCount=Integer.parseInt(MethodPOM.clickExpired().getText());
		 int AppliedCount=Integer.parseInt(MethodPOM.clickApplied().getText());
		 int PendingForReviewCount=Integer.parseInt(MethodPOM.clickpendingforreview().getText());
		 int RejectedCount=Integer.parseInt(MethodPOM.clickRejected().getText());
		 int TerminateCount=Integer.parseInt(LiPerformerPOM.terminated().getText());
		 
		 int total = ActiveCount + ExpiringCount + ExpiredCount + AppliedCount+PendingForReviewCount+RejectedCount+TerminateCount;  
		 
		 LiPerformerPOM.clickMyReport().click();		//Clicking on 'My Reports'
			Thread.sleep(3000);
		 CFOcountPOM.readTotalItems1().click();
			Thread.sleep(3000);
			String item1 = CFOcountPOM.readTotalItems1().getText();
			//String NoRecord = LiReviewerPOM.reNorecord.getText();
			 if(!item1.equalsIgnoreCase("No items to display")) 
			 {
			String[] bits1 = item1.split(" ");								//Splitting the String
			String compliancesCount1 = bits1[bits1.length - 2];				//Getting the second last word (total number of users)
			int count2 = Integer.parseInt(compliancesCount1);
			String NoRecord = LiReviewerPOM.reNorecord().getText();
			   if(!NoRecord.equalsIgnoreCase("No items to display")) 
			   {
				   if(count2 == total)
					{
						
						test.log(LogStatus.PASS, "Total of Report  Count="+count2+" | Sum of Dashboard Total License  Count="+total);
					}
					else
					{
						
						test.log(LogStatus.FAIL, "Total of Report Count="+count2+" | Sum of Dashboard License  Count="+total);
					}
					}
			   else {
					test.log(LogStatus.PASS, "No records found.");
				}
			   }

			
				
		}
   public static void InternalDashallreportallcount( ExtentTest test, String type) throws InterruptedException
   {
	    WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
		LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
		
		
		Select drp = new Select(LiPerformerPOM.clickType());
		drp.selectByIndex(1);
		CFOcountPOM.clickApply1().click();	
		  Thread.sleep(3000);
		 int ActiveCount=Integer.parseInt(MethodPOM.clickActive().getText());
		 int ExpiringCount=Integer.parseInt(MethodPOM.clickExpiring().getText());
		 int ExpiredCount=Integer.parseInt(MethodPOM.clickExpired().getText());
		 int AppliedCount=Integer.parseInt(MethodPOM.clickApplied().getText());
		 int PendingForReviewCount=Integer.parseInt(MethodPOM.clickpendingforreview().getText());
		 int RejectedCount=Integer.parseInt(MethodPOM.clickRejected().getText());
		 int TerminateCount=Integer.parseInt(LiPerformerPOM.terminated().getText());
		 
		 int total = ActiveCount + ExpiringCount + ExpiredCount + AppliedCount+PendingForReviewCount+RejectedCount+TerminateCount;  
		 
		 LiPerformerPOM.clickMyReport().click();		//Clicking on 'My Reports'
		  Thread.sleep(3000);
			LiPerformerPOM.clickType22().click();			//Clicking on 'Type' drop down.
			Thread.sleep(500);
			LiPerformerPOM.selectInternal().click();//Selecting 'Internal' option.
			Thread.sleep(1000);
			LiPerformerPOM.Reportapply().click();
			progress();
			Thread.sleep(5000);
			  JavascriptExecutor js1=(JavascriptExecutor)  getDriver() ;
				js1.executeScript("window.scroll(0,500)");
		 CFOcountPOM.readTotalItems1().click();
			
			String item1 = CFOcountPOM.readTotalItems1().getText();
			//String NoRecord = LiReviewerPOM.reNorecord.getText();
			 if(!item1.equalsIgnoreCase("No items to display")) 
			 {
			String[] bits1 = item1.split(" ");								//Splitting the String
			String compliancesCount1 = bits1[bits1.length - 2];				//Getting the second last word (total number of users)
			int count2 = Integer.parseInt(compliancesCount1);
			String NoRecord = LiReviewerPOM.reNorecord().getText();
			   if(!NoRecord.equalsIgnoreCase("No items to display")) 
			   {
				   if(count2 == total)
					{
						
						test.log(LogStatus.PASS, "Total of Report  Count="+count2+" | Sum of Total License  Count="+total);
					}
					else
					{
						
						test.log(LogStatus.FAIL, "Total of Report Count="+count2+" | Sum of License  Count="+total);
					}
					}
			   else {
					test.log(LogStatus.PASS, "No records found.");
				}
			   }

			
				
		}
   public static void InternalDashallreportallcountforPerformer( ExtentTest test, String type) throws InterruptedException
   {
	    WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		wait.until(ExpectedConditions.visibilityOf(LiPerformerPOM.clickType()));
		LiPerformerPOM.clickType().click();				//Clicking on 'Type' drop down.
		
		
		Select drp = new Select(LiPerformerPOM.clickType());
		drp.selectByIndex(1);
		CFOcountPOM.clickApply1().click();	
		  Thread.sleep(3000);
		 int ActiveCount=Integer.parseInt(MethodPOM.clickActive().getText());
		 int ExpiringCount=Integer.parseInt(MethodPOM.clickExpiring().getText());
		 int ExpiredCount=Integer.parseInt(MethodPOM.clickExpired().getText());
		 int AppliedCount=Integer.parseInt(MethodPOM.clickApplied().getText());
		 int PendingForReviewCount=Integer.parseInt(MethodPOM.clickpendingforreview().getText());
		 int RejectedCount=Integer.parseInt(MethodPOM.clickRejected().getText());
		 int TerminateCount=Integer.parseInt(LiPerformerPOM.terminatedPerformer().getText());
		 
		 int total = ActiveCount + ExpiringCount + ExpiredCount + AppliedCount+PendingForReviewCount+RejectedCount+TerminateCount;  
		 
		 LiPerformerPOM.clickMyReport().click();		//Clicking on 'My Reports'
		  Thread.sleep(3000);
			LiPerformerPOM.clickType22().click();			//Clicking on 'Type' drop down.
			Thread.sleep(500);
			LiPerformerPOM.selectInternal().click();//Selecting 'Internal' option.
			Thread.sleep(1000);
			LiPerformerPOM.Reportapply().click();
			progress();
			Thread.sleep(5000);
			  JavascriptExecutor js1=(JavascriptExecutor)  getDriver() ;
				js1.executeScript("window.scroll(0,500)");
		 CFOcountPOM.readTotalItems1().click();
			
			String item1 = CFOcountPOM.readTotalItems1().getText();
			//String NoRecord = LiReviewerPOM.reNorecord.getText();
			 if(!item1.equalsIgnoreCase("No items to display")) 
			 {
			String[] bits1 = item1.split(" ");								//Splitting the String
			String compliancesCount1 = bits1[bits1.length - 2];				//Getting the second last word (total number of users)
			int count2 = Integer.parseInt(compliancesCount1);
			String NoRecord = LiReviewerPOM.reNorecord().getText();
			   if(!NoRecord.equalsIgnoreCase("No items to display")) 
			   {
				   if(count2 == total)
					{
						
						test.log(LogStatus.PASS, "Total of Report  Count="+count2+" | Sum of Total License  Count="+total);
					}
					else
					{
						
						test.log(LogStatus.FAIL, "Total of Report Count="+count2+" | Sum of License  Count="+total);
					}
					}
			   else {
					test.log(LogStatus.PASS, "No records found.");
				}
			   }

			
				
		}
   public static void DashallreportallcountPerformer( ExtentTest test, String type) throws InterruptedException
   {
	    WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		Thread.sleep(3000);
		 int ActiveCount=Integer.parseInt(MethodPOM.clickActive().getText());
		 int ExpiringCount=Integer.parseInt(MethodPOM.clickExpiring().getText());
		 int ExpiredCount=Integer.parseInt(MethodPOM.clickExpired().getText());
		 int AppliedCount=Integer.parseInt(MethodPOM.clickApplied().getText());
		 int PendingForReviewCount=Integer.parseInt(MethodPOM.clickpendingforreview().getText());
		 int RejectedCount=Integer.parseInt(MethodPOM.clickRejected().getText());
		 int TerminateCount=Integer.parseInt(LiPerformerPOM.terminatedPerformer().getText());
		 
		 int total = ActiveCount + ExpiringCount + ExpiredCount + AppliedCount+PendingForReviewCount+RejectedCount+TerminateCount;  
		 
		 LiPerformerPOM.clickMyReport().click();		//Clicking on 'My Reports'
			Thread.sleep(3000);
		 CFOcountPOM.readTotalItems1().click();
			Thread.sleep(3000);
			String item1 = CFOcountPOM.readTotalItems1().getText();
			//String NoRecord = LiReviewerPOM.reNorecord.getText();
			 if(!item1.equalsIgnoreCase("No items to display")) 
			 {
			String[] bits1 = item1.split(" ");								//Splitting the String
			String compliancesCount1 = bits1[bits1.length - 2];				//Getting the second last word (total number of users)
			int count2 = Integer.parseInt(compliancesCount1);
			String NoRecord = LiReviewerPOM.reNorecord().getText();
			   if(!NoRecord.equalsIgnoreCase("No items to display")) 
			   {
				   if(count2 == total)
					{
						
						test.log(LogStatus.PASS, "Total of Report  Count="+count2+" | Sum of Dashboard Total License  Count="+total);
					}
					else
					{
						
						test.log(LogStatus.FAIL, "Total of Report Count="+count2+" | Sum of Dashboard License  Count="+total);
					}
					}
			   else {
					test.log(LogStatus.PASS, "No records found.");
				}
			   }

			
   }	
   public static void ViewComplianceSampleform( ExtentTest test, String type) throws InterruptedException
   {
	    WebDriverWait wait = new WebDriverWait( getDriver(), (30));
		Thread.sleep(3000);
		  getDriver().manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		   JavascriptExecutor Js1 = (JavascriptExecutor) getDriver();
		   Js1.executeScript("window.scrollBy(0,1000)");
			wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickBystatusActive()));	  
			String BystatusActive=MethodPOM.clickBystatusActive().getText();
			
		     int BystatusActiveggraph = Integer.parseInt(BystatusActive);	//Reading Active graph count.
		     Thread.sleep(4000);
		      MethodPOM.clickBystatusActive().click();					//Clicking on 'Active' image
		      Thread.sleep(5000);
		      wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("showChartDetails"));	//Switching to iFrame.
		      MethodPOM.clickAllOverview().click();
			  Thread.sleep(3000);
			 wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("OverViews"));	//Switching to iFrame.
			  //wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("downloadfile"));	
			  getDriver().findElement(By.xpath("//*[@id='lbDownloadSample']")).click(); // Modify as per actual website locator

		        // Wait for the file to download
		        boolean isDownloaded = waitForFileDownload("C://Users//deepalid//Downloads", 30);
		        
		        // Assert that file is downloaded
		        if (isDownloaded) 
		        {
		        Assert.assertTrue(isDownloaded, "File download failed!");
		        test.log(LogStatus.PASS, "File downloaded successfully.");
		        }
		        else
		        {
		        	test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
		        }
		        
			
		        getDriver().findElement(By.xpath("//*[@id='lnkViewSampleForm']")).click();

		        // Check if popup is displayed
		        WebElement popup = getDriver().findElement(By.xpath("//*[@id='DocumentShowPopUp']")); // Change ID as per your application

		        if (popup.isDisplayed()) 
		        {
		        	 test.log(LogStatus.PASS, "File View  successfully.");
		        } else 
		        {
		        	test.log(LogStatus.FAIL, "File Not  Viewed ");
		        }
			  
				
   }



   public static void PerformerDashboardTerminateLicensefilter( ExtentTest test, String type) throws InterruptedException, IOException
   {
   	WebDriverWait wait = new WebDriverWait( getDriver(), 20);                                                                                                
   	   MethodPOM.DashboardEntityclick().click();                                                                                                             
   	   Thread.sleep(5000);                                                                                                                                   
   	   MethodPOM.Entitypluseclick().click();                                                                                                                 
   	   Thread.sleep(5000);                                                                                                                                   
   	   MethodPOM.Dashselectloc().click();                                                                                                                    
   		getDriver().manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);                                                                                   
   		   Thread.sleep(3000);                                                                                                                                  
   		   if(type.equalsIgnoreCase("Internal"))
   		   {
   			   MethodPOM.clickDashlictype().click();
   			   Thread.sleep(5000);
   			   MethodPOM.serachlic1().sendKeys("Annual Maintance",Keys.ENTER);
   			   Thread.sleep(5000);
   			   LicenseCompanyadmin.MethodPOM.ClickApply().click();
   			   
   		   }
   		   else
   		   {
   		   MethodPOM.clickDashlictype().click();
   		   Thread.sleep(5000);
   		   MethodPOM.Performerserachlic11().sendKeys("Shops & Commercial Establishment",Keys.ENTER);
   		   Thread.sleep(5000);
   		   LicenseCompanyadmin.MethodPOM.ClickApply().click();
   		   }
   		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickTerminateper()));
   		String Terminate=MethodPOM.clickTerminateper().getText();
   		
   	     int TerminateLicense = Integer.parseInt(Terminate);	//Reading Terminate count.

   	      MethodPOM.clickTerminateper().click();					//Clicking on 'Terminate ' image
   	      Thread.sleep(4000);
   	        JavascriptExecutor js1=(JavascriptExecutor)  getDriver() ;
   			js1.executeScript("window.scroll(0,500)");
   			Thread.sleep(4000);
   			String item2 = CFOcountPOM.readTotalItems1().getText();
   			//String NoRecord = LiReviewerPOM.reNorecord.getText();
   			 if(!item2.equalsIgnoreCase("No items to display")) 
   			 {
   			MethodPOM.clickReadTerminate().click();					//Clicking on total items count
   			Thread.sleep(500);
   			String item = MethodPOM.clickReadTerminate().getText();	//Reading total items String value
   			String[] bits = item.split(" ");								//Splitting the String
   			String LicensTerminate= bits[bits.length - 2];		//Getting the second last word (total number of users)
   			
   			//int total = Integer.parseInt(MethodPOM.clickReadActive().getText());
   			int total = Integer.parseInt(LicensTerminate);
   			if(TerminateLicense == total)
   				{
   					//test.log(LogStatus.PASS, "Number of Terminate License  grid matches to Dashboard Terminate  License   Count.");
   					test.log(LogStatus.PASS, "No of Terminated  License  in the grid = "+total+" | Dashboard Terminated License  Count = "+TerminateLicense);
   				}
   				else
   				{
   					//test.log(LogStatus.FAIL, "Number of Terminate License does not matches to Dashboard Terminate License   Count.");
   					test.log(LogStatus.FAIL, "No of Terminated License  in the grid = "+total+" | Dashboard Terminated License  Count = "+TerminateLicense);
   				}
   			 }
   			 else
   			  {
   				   		      
   				test.log(LogStatus.PASS,"No Record Found");
   				MethodPOM.clickMyDashboard().click();
   					      
   			  }
   }

private static boolean waitForFileDownload(String string, int i) {
	// TODO Auto-generated method stub
	return false;
}
public static void NewActive( ExtentTest test, String type) throws InterruptedException, IOException
{	
	WebDriverWait wait = new WebDriverWait( getDriver(), 20);
		
		wait.until(ExpectedConditions.visibilityOf(MethodPOM.clickActive()));
		String Active=MethodPOM.clickActive().getText();
		
	     int Activelicense = Integer.parseInt(Active);	//Reading Active count.

	      MethodPOM.clickActive().click();					//Clicking on 'Active' image
	      Thread.sleep(4000);
	        JavascriptExecutor js1=(JavascriptExecutor)getDriver() ;
			js1.executeScript("window.scroll(0,500)");
			Thread.sleep(4000);
		  	String item1 = MethodPOM.clickReadExpired().getText();	//Reading total items String value
			  if(!item1.equalsIgnoreCase("No items to display"))
			 {
			MethodPOM.clickReadActive().click();					//Clicking on total items count
			Thread.sleep(500);
			String item = MethodPOM.clickReadActive().getText();	//Reading total items String value
			String[] bits = item.split(" ");								//Splitting the String
			String LicenseActiveCount = bits[bits.length - 2];		//Getting the second last word (total number of users)
			
			//int total = Integer.parseInt(MethodPOM.clickReadActive.getText());
			int total = Integer.parseInt(LicenseActiveCount);
			
			if(Activelicense == total)
				
			{
				//test.log(LogStatus.PASS, "Dashboard 'Expired' count matches to the total records displayed in grid.");
				//test.log(LogStatus.PASS, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
			}
			else
			{
				//test.log(LogStatus.FAIL, "Dashboard 'Expired' count doesn't matches to the total records displayed in grid.");
				//test.log(LogStatus.FAIL, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+total);
			}
				
			LiPerformerPOM.clickRoleDropdown().click();
			Thread.sleep(500);
			LiPerformerPOM.selectReviewerRole().click();
			Thread.sleep(8000);
		    
				js1.executeScript("window.scroll(0,500)");
				Thread.sleep(4000);
			  	String item2 = MethodPOM.clickReadExpired().getText();	//Reading total items String value
				 if(!item2.equalsIgnoreCase("No items to display"))
				{
				MethodPOM.clickReadActive().click();					//Clicking on total items count
				Thread.sleep(500);
				String itemnew = MethodPOM.clickReadActive().getText();	//Reading total items String value
				String[] bits1 = itemnew.split(" ");								//Splitting the String
				String LicenseActiveCount1 = bits1[bits1.length - 2];		//Getting the second last word (total number of users)
				int totala = Integer.parseInt(LicenseActiveCount1);
				
				//int BothTotal=total+totala;
				if(Activelicense == totala)
			
				{
					//test.log(LogStatus.PASS, "Dashboard 'Expired' count matches to the total records displayed in grid.");
					//test.log(LogStatus.PASS, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+totala);
				}
				else
				{
					//test.log(LogStatus.FAIL, "Dashboard 'Expired' count doesn't matches to the total records displayed in grid.");
					//test.log(LogStatus.FAIL, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+totala);
				}
				int BothTotal=total+totala;
				if(Activelicense == BothTotal)
				{
					//test.log(LogStatus.PASS, "Dashboard 'Expired' count matches to the total records displayed in grid.");
					test.log(LogStatus.PASS, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+BothTotal);
				}
				else
				{
					//test.log(LogStatus.PASS, "Dashboard 'Expired' count matches to the total records displayed in grid.");
					test.log(LogStatus.FAIL, "Dashboard 'Active' count = "+Activelicense+" | Total records in grid = "+BothTotal);
				}
				}
				else
					  
				  {   		      
					test.log(LogStatus.PASS,"No Record Found");
					MethodPOM.clickMyDashboard().click();
				  }
				 
				}
		
	Thread.sleep(5000);	
	MethodPOM.ClickActiveOverview().click();
	test.log(LogStatus.PASS, " License Overview Details Successfully.");
	Thread.sleep(5000);
	MethodPOM.ClickCloseOverview().click();			
	Thread.sleep(7000);
	LiPerformerPOM.editlicenseicon().click();
	Thread.sleep(5000);
	licenseManagement.licmgmtPOM.LicenseTitle().sendKeys(".");	
	Thread.sleep(5000);
	//licenseManagement.licmgmtPOM.LicenseNo().sendKeys("Test");
	//Thread.sleep(5000);
	js1.executeScript("window.scrollBy(0,3000)");

	licenseManagement.licmgmtPOM.Nomineesubmit().click();
	 // Switching to Alert    
	 Thread.sleep(500);
    Alert alert =getDriver().switchTo().alert();
   
    // Capturing alert message.   
    String alertMessage= getDriver().switchTo().alert().getText();
   
    Thread.sleep(3000);
  //  test.log(LogStatus.PASS, alertMessage);
   
    // Displaying alert message
   // System.out.println(alertMessage);
    // Accepting alert
    Thread.sleep(3000);
    By locator = By.xpath("//*[@class='k-button-group k-dialog-buttongroup k-dialog-button-layout-stretched']");

	//wait.until(ExpectedConditions.presenceOfElementLocated(locator));
	Thread.sleep(4000);
	
//	WebElement ViewButton = driver.findElement(locator);	
//	Thread.sleep(3000);
//JavascriptExecutor jse=(JavascriptExecutor)driver;
//jse.executeScript("arguments[0].click();", ViewButton);
	Thread.sleep(4000);
    
  //  LiPerformerPOM.licenseOK.click();
    
 
    // Accepting alert
   alert.accept();
    test.log(LogStatus.PASS,"License Details Updated Successfully." );
    
      Thread.sleep(5000);
      
      licmgmtPOM.editlicenseclose().click();
      Thread.sleep(300);
      js1.executeScript("window.scrollBy(0,2000)");				//Scrolling down window by 2000 px.
		
	  Thread.sleep(10000);
		CFOcountPOM.readTotalItems1().click();
		
		String item = CFOcountPOM.readTotalItems1().getText();
		//String NoRecord = LiReviewerPOM.reNorecord.getText();
		 if(!item.equalsIgnoreCase("No items to display")) 
		 {
		String[] bits = item.split(" ");								//Splitting the String
		String compliancesCount = bits[bits.length - 2];				//Getting the second last word (total number of users)
		int count2 = Integer.parseInt(compliancesCount);
		String NoRecord = LiReviewerPOM.reNorecord().getText();
		   if(!NoRecord.equalsIgnoreCase("No items to display")) 
		 {
			   try
				{
					performerPOM.clickExcelReport().sendKeys(Keys.PAGE_DOWN);
				}
				catch(Exception e)
				{
					
				}
				js1.executeScript("window.scrollBy(0,1000)");
				
			
				Thread.sleep(100);
				File dir = new File("C://Users//deepalid//Downloads");
				File[] dirContents = dir.listFiles();							//Counting number of files in directory before download 
				
				Thread.sleep(500);
				CFOcountPOM.clickNextPage1().sendKeys(Keys.PAGE_UP);
				Thread.sleep(250);
				licenseManagement.licmgmtPOM.WorkspaceExport().click();
				//performerPOM.clickExcelReport().click();					//Clicking on 'Excel Report' image.
				
				
				Thread.sleep(500);
				File dir1 = new File("C://Users//deepalid//Downloads");
				File[] allFilesNew = dir1.listFiles();							//Counting number of files in directory after download
				
				if(dirContents.length < allFilesNew.length)
				{
					test.log(LogStatus.PASS, "File downloaded successfully.");
					
					File lastModifiedFile = allFilesNew[1];			//Storing any 0th index file in 'lastModifiedFile' file name.
				    for (int i = 1; i < allFilesNew.length; i++) 	//For loop till the number of files in directory.
				    {
				       if (lastModifiedFile.lastModified() < allFilesNew[i].lastModified()) 	//If allFilesNew[i] file is having large/latest time time of update then latest modified file be allFilesNew[i] file.
				       {
				           lastModifiedFile = allFilesNew[i];
				       }
				    }
					
					Thread.sleep(100);
					fis = new FileInputStream(lastModifiedFile);
					workbook = new XSSFWorkbook(fis);
					sheet = workbook.getSheetAt(0);					//Retrieving first sheet of Workbook
					
					int no = sheet.getLastRowNum();
					Row row = sheet.getRow(no);
					Cell c1 = row.getCell(0);
					int records =(int) c1.getNumericCellValue();
					fis.close();
					
					if(count2 == records)
					{
						//test.log(LogStatus.PASS, "Notice=No of records from grid matches to no of records in Excel Sheet.");
						test.log(LogStatus.PASS, "For "+type+" status total records from Grid = "+count2+" | Total records from Report = "+records);
					}
					else
					{
						//test.log(LogStatus.FAIL, "Notice=No of records from grid doesn't matches to no of records in Excel Sheet.");
						test.log(LogStatus.FAIL, "For "+type+" status total records from Grid = "+count2+" | Total records from Excel Sheet = "+records);
					}
				}
				else
				{
					test.log(LogStatus.FAIL, "File doesn't downloaded successfully.");
				}
		 }
      
      MethodPOM.clickMyDashboard().click();
      Thread.sleep(1000);
		  
			  }

		  else
		  {
			   		      
			test.log(LogStatus.PASS,"No Record Found");
			MethodPOM.clickMyDashboard().click();
		  }		     
}}

